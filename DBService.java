package com.guruinfo.scm.common.service;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import android.widget.RemoteViews;

import com.dd.CircularProgressButton;
import com.google.gson.Gson;
import com.guruinfo.scm.*;
import com.guruinfo.scm.common.AppContants;
import com.guruinfo.scm.common.SCMApplication;
import com.guruinfo.scm.common.SessionManager;
import com.guruinfo.scm.common.model.SCMLoadListModel;
import com.guruinfo.scm.common.ui.TextViewPlus;
import com.guruinfo.scm.common.utils.ApiCalls;
import com.guruinfo.scm.common.utils.Sharedpref;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.DeleteQuery;
import org.greenrobot.greendao.query.WhereCondition;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.List;

import static com.guruinfo.scm.DBUpdateService.*;

/**
 * Created by Kannan G on 7/14/2017.
 */
public class DBService extends Service {
    String TAG = "DBService";
    TextViewPlus dummyTextView;
    CircularProgressButton dummyProgress;
    Context context = this;
    Gson gson = new Gson();
    private final IBinder binder = new MyBinder();
    StatusDao statusDao;
    PjtStoreDao PjtsStoreDao;
    ContractorsDao contractorsDao;
    RequestedByDao requestedByDao;
    VendorNameDao vendorNameDao;
    ProjWoMasterDao projWoMasterDao;
    IOWMaterialChildDao iowMaterialChildDao;
    CommMasterDetailsDao commMasterDetailsDao;
    MaterialsMasterDao materialsMasterDao;
    UOMMaterialChildDao uomMaterialChildDao;
    StageListDao stageListDao;
    UpdateOnTableDao updateOnTableDao;
    RightsTableDao rightsTableDao;
    Proj_mir_proc_childDao proj_mir_proc_childDao;
    Proj_mir_masterDao proj_mir_masterDao;
    Proj_min_proc_childDao proj_min_proc_childDao;
    Proj_min_masterDao proj_min_masterDao;
    Proj_mr_proc_childDao proj_mr_proc_childDao;
    MobileRightsKeyMasterDao mobileRightsKeyMasterDao;
    AdmEmpMasterDao admEmpMasterDao;
    ProjUserMaterialListDao projUserMaterialListDao;
    ProjAlternateMaterialMasterDao projAlternateMaterialMasterDao;
    MobileRightsMasterDao mobileRightsMasterDao;
    ProjMaterialChildDao projMaterialChildDao;
    ProjPoMasterDao projPoMasterDao;
    ProjPoItemChildDao projPoItemChildDao;
    ProjJobIowStage_masterDao projJobIowStage_masterDao;
    ProjStageIowMaterialDetDao projStageIowMaterialDetDao;
    ProjMrMasterDao projMrMasterDao;
    ProjVendorMasterViewDao projVendorMasterViewDao;
    AdmEmpMasterViewDao admEmpMasterViewDao;
    ArcApprovalConfigTableDao arcApprovalConfigTableDao;
    ProjUserProjectListDao projUserProjectListDao;
    ProjStoreMasterDao projStoreMasterDao;
    ProjStoreStockDao projStoreStockDao;
    ProjProjectAddressMasterDao projProjectAddressMasterDao;
    ProjPoOtherChargeChildDao projPoOtherChargeChildDao;
    CmnPartyAddressInfoDao cmnPartyAddressInfoDao;
    ProjPoGernalTermsChildDao projPoGernalTermsChildDao;
    ProjPoTermsChildDao projPoTermsChildDao;
    CmnTaxMasterDao cmnTaxMasterDao;
    CmnPartyIdDocInfoDao cmnPartyIdDocInfoDao;
    CmnPartyCompanyInfoDao cmnPartyCompanyInfoDao;
    ProjMbookMasterDao projMbookMasterDao;
    ProjContractorMasterViewDao projContractorMasterViewDao;
    ProjProjectMasterDao projProjectMasterDao;
    ProjMbookSubActivityChildDao projMbookSubActivityChildDao;
    ProjMbookIowNmrChildDao projMbookIowNmrChildDao;
    ProjMbookiowChildDao projMbookiowChildDao;
    ProjStageChildDao projStageChildDao;
    ProjLabourMasterDao projLabourMasterDao;
    ProjFormulaMasterDao projFormulaMasterDao;
    ProjMbookIowGridChildDao projMbookIowGridChildDao;
    ProjJobStageGridIowDao projJobStageGridIowDao;
    ProjJobStageGridMasterDao projJobStageGridMasterDao;
    ProjIowMaterialChildDao projIowMaterialChildDao;
    ProjJobMasterDao projJobMasterDao;
    ProjJobIowMasterDao projJobIowMasterDao;
    ProjIowMasterDao projIowMasterDao;
    ProjUserStageListDao projUserStageListDao;
    ProjMrChildDao projMrChildDao;
    ProjMrItemScheduleChildDao projMrItemScheduleChildDao;
    ProjMirChildDao projMirChildDao;
    ProjVechicleMovementFormDao projVechicleMovementFormDao;
    ProjIndentMasterDao projIndentMasterDao;
    ProjIndentChildDao projIndentChildDao;
    ProjMinChildDao projMinChildDao;
    ProjGrnItemChildDao projGrnItemChildDao;
    ProjGrnMasterDao projGrnMasterDao;
    WeightDataDao weightDataDao;
    ProjGrnOtherChargeChildDao projGrnOtherChargeChildDao;
    ProjBmrfMasterDao projBmrfMasterDao;
    ProjMatBmrfChildDao projMatBmrfChildDao;
    ProjMrirItemChildDao projMrirItemChildDao;
    ProjMrirMasterDao projMrirMasterDao;
    ProjMrirOtherChargeChildDao projMrirOtherChargeChildDao;
    ProjMtdnChildDao projMtdnChildDao;
    ProjMtdnMasterDao projMtdnMasterDao;
    ProjMtdnOtherChargeChildDao projMtdnOtherChargeChildDao;
    ProjMtnChildDao projMtnChildDao;
    ProjMtnMasterDao projMtnMasterDao;
    ProjMtrnMasterDao projMtrnMasterDao;
    ProjMtnCloseMasterDao projMtnCloseMasterDao;
    ProjPoBillMasterDao projPoBillMasterDao;
    ProjPoBillRecommendationMasterDao projPoBillRecommendationMasterDao;
    ProjPoBillRecommendationPaymentChildDao projPoBillRecommendationPaymentChildDao;
    ProjPoBillRecommendationPaymentMasterDao projPoBillRecommendationPaymentMasterDao;
    ProjPoBillRecommendationChildDao projPoBillRecommendationChildDao;
    ProjPoBillRecommendationPaymentDetChildDao projPoBillRecommendationPaymentDetChildDao;
    ProjPoBillItemChildDao projPoBillItemChildDao;
    ProjPoBillRecommendationPoChildDao projPoBillRecommendationPoChildDao;
    ProjPoBillOtherChargeChildDao projPoBillOtherChargeChildDao;
    ProjPoActBillOthersChildDao projPoActBillOthersChildDao;
    ProjMtanMasterDao projMtanMasterDao;
    ProjMtanChildDao projMtanChildDao;
    ProjMtanOtherChargeChildDao projMtanOtherChargeChildDao;
    ProjWoBillIowChildDao projWoBillIowChildDao;
    ProjWoBillSubActivityChildDao projWoBillSubActivityChildDao;
    ProjWoBillNmrChildDao projWoBillNmrChildDao;
    ProjMbookQaMasterDao projMbookQaMasterDao;
    ProjWoBillIowDetChildDao projWoBillIowDetChildDao;
    ProjWoBillIowTaxChildDao projWoBillIowTaxChildDao;
    ProjWoBillSubActivityDetChildDao projWoBillSubActivityDetChildDao;
    ProjWoBillNmrDetChildDao projWoBillNmrDetChildDao;
    FinAccountMasterDao finAccountMasterDao;
    ProjWoBillRecommendationPaymentMasterDao projWoBillRecommendationPaymentMasterDao;
    ProjWoBillRecommendationPaymentChildDao projWoBillRecommendationPaymentChildDao;
    ProjMirnMasterDao projMirnMasterDao;
    ProjMirnChildDao projMirnChildDao;
    ProjMbookLabourChildDao projMbookLabourChildDao;

    protected DaoSession daoSession;
    protected Database db;
    static String cr_id, uid;
    SessionManager session;
    public static int totalStage = 0;
    public static int incrementStage = 0;
    public static Boolean isServiceLoading;
    public static String flag1, flag2, flag3, flag4, flag5, flag6, flag7, flag8, flag9, flag10, flag11, flag12, flag13,
            flag14, flag15, flag16, flag17, flag18, flag19, flag20, flag21, flag22, flag23, flag24, flag25, flag26, flag27,
            flag28, flag29, flag30, flag31, flag32, flag33, flag34, flag35, flag36, flag37, flag38, flag39, flag40, flag41,
            flag42, flag43, flag44, flag45, flag46, flag47, flag48, flag49, flag50, flag51, flag52, flag53, flag54, flag55,
            flag56, flag57, flag58, flag59, flag60, flag61, flag62, flag63, flag64, flag65, flag66, flag67, flag68, flag69,
            flag70, flag71, flag72, flag73, flag74, flag75, flag76, flag77, flag78, flag79, flag80, flag81, flag82, flag83,
            flag84, flag85, flag86, flag87, flag88, flag89, flag90, flag91, flag92, flag93, flag94, flag95, flag96, flag97,
            flag98, flag99, flag100, flag101, flag102, flag103, flag104, flag105, flag106, flag107, flag108, flag109;
    private Handler progressHandler = new Handler();
    int pbValue = 0;
    NotificationManager notificationManager = null;
    int notiId = 12;
    int id = 23;
    int projJobIowStageMaster_id = 24, proj_mir_master_id = 25, proj_mir_proc_child_id = 26, proj_min_proc_child_id = 27, proj_min_master_id = 28,
            projPoItemChild_id = 29, cmnPartyAddressInfo_id = 31, projStoreStock_id = 32, projJobStageGridMaster_id = 33, projJobStageGridIow_id = 34, projMbookIowGridChild_id = 35, projUserStageList_id = 36,
            weightData_id = 60,
            projGrnItemChild_id = 61,
            projGrnMaster_id = 62,
            projMinChild_id = 63,
            projIndentChild_id = 64,
            projIndentMaster_id = 65,
            projVechicleMovementForm_id = 66,
            projMirChild_id = 67,
            projMbookIowChild_id = 68,
            projMbookIowNmrChild_id = 69,
            projMbookSubActivityChild_id = 70,
            projMbookMaster_id = 71;
    Intent mainIntent;

    @Override
    public IBinder onBind(Intent arg0) {
        return binder;
    }

    public void doServiceStuff(String req, TextViewPlus updateOn, CircularProgressButton pbView, TextViewPlus msg, String flag) {
        // task.execute();
        onTaskRemoved(mainIntent);
        onListLoad(req, updateOn, pbView, msg, flag);
    }

    @Override
    public void onCreate() {
        // TODO Auto-generated method stub
        super.onCreate();
        //start a separate thread and start listening to your network object
    }

    private void getFromSession() {
        session = new SessionManager(getApplicationContext());
        uid = session.getUserDetails().get(SessionManager.ID);
        cr_id = session.getUserDetails().get(SessionManager.CR_ID);
    }

    // create an inner Binder class
    public class MyBinder extends Binder {
        public DBService getService() {
            dummyTextView = new TextViewPlus(context);
            dummyProgress = new CircularProgressButton(context);
            daoSession = ((SCMApplication) context.getApplicationContext()).getDaoSession();
            db = ((SCMApplication) context.getApplicationContext()).getDb();
            statusDao = daoSession.getStatusDao();
            PjtsStoreDao = daoSession.getPjtStoreDao();
            contractorsDao = daoSession.getContractorsDao();
            requestedByDao = daoSession.getRequestedByDao();
            vendorNameDao = daoSession.getVendorNameDao();
            projWoMasterDao = daoSession.getProjWoMasterDao();
            iowMaterialChildDao = daoSession.getIOWMaterialChildDao();
            commMasterDetailsDao = daoSession.getCommMasterDetailsDao();
            materialsMasterDao = daoSession.getMaterialsMasterDao();
            uomMaterialChildDao = daoSession.getUOMMaterialChildDao();
            stageListDao = daoSession.getStageListDao();
            updateOnTableDao = daoSession.getUpdateOnTableDao();
            rightsTableDao = daoSession.getRightsTableDao();
            proj_mir_proc_childDao = daoSession.getProj_mir_proc_childDao();
            proj_mir_masterDao = daoSession.getProj_mir_masterDao();
            proj_min_proc_childDao = daoSession.getProj_min_proc_childDao();
            proj_min_masterDao = daoSession.getProj_min_masterDao();
            proj_mr_proc_childDao = daoSession.getProj_mr_proc_childDao();
            mobileRightsKeyMasterDao = daoSession.getMobileRightsKeyMasterDao();
            admEmpMasterDao = daoSession.getAdmEmpMasterDao();
            projUserMaterialListDao = daoSession.getProjUserMaterialListDao();
            projAlternateMaterialMasterDao = daoSession.getProjAlternateMaterialMasterDao();
            mobileRightsMasterDao = daoSession.getMobileRightsMasterDao();
            projMaterialChildDao = daoSession.getProjMaterialChildDao();
            projPoMasterDao = daoSession.getProjPoMasterDao();
            projPoItemChildDao = daoSession.getProjPoItemChildDao();
            projJobIowStage_masterDao = daoSession.getProjJobIowStage_masterDao();
            projStageIowMaterialDetDao = daoSession.getProjStageIowMaterialDetDao();
            projMrMasterDao = daoSession.getProjMrMasterDao();
            projVendorMasterViewDao = daoSession.getProjVendorMasterViewDao();
            admEmpMasterViewDao = daoSession.getAdmEmpMasterViewDao();
            arcApprovalConfigTableDao = daoSession.getArcApprovalConfigTableDao();
            projUserProjectListDao = daoSession.getProjUserProjectListDao();
            projStoreMasterDao = daoSession.getProjStoreMasterDao();
            projStoreStockDao = daoSession.getProjStoreStockDao();
            projProjectAddressMasterDao = daoSession.getProjProjectAddressMasterDao();
            projPoOtherChargeChildDao = daoSession.getProjPoOtherChargeChildDao();
            cmnPartyAddressInfoDao = daoSession.getCmnPartyAddressInfoDao();
            projPoGernalTermsChildDao = daoSession.getProjPoGernalTermsChildDao();
            projPoTermsChildDao = daoSession.getProjPoTermsChildDao();
            cmnTaxMasterDao = daoSession.getCmnTaxMasterDao();
            cmnPartyCompanyInfoDao = daoSession.getCmnPartyCompanyInfoDao();
            cmnPartyIdDocInfoDao = daoSession.getCmnPartyIdDocInfoDao();
            projMbookMasterDao = daoSession.getProjMbookMasterDao();
            projContractorMasterViewDao = daoSession.getProjContractorMasterViewDao();
            projProjectMasterDao = daoSession.getProjProjectMasterDao();
            projMbookSubActivityChildDao = daoSession.getProjMbookSubActivityChildDao();
            projMbookIowNmrChildDao = daoSession.getProjMbookIowNmrChildDao();
            projMbookiowChildDao = daoSession.getProjMbookiowChildDao();
            projStageChildDao = daoSession.getProjStageChildDao();
            projLabourMasterDao = daoSession.getProjLabourMasterDao();
            projFormulaMasterDao = daoSession.getProjFormulaMasterDao();
            projMbookIowGridChildDao = daoSession.getProjMbookIowGridChildDao();
            projJobStageGridIowDao = daoSession.getProjJobStageGridIowDao();
            projJobStageGridMasterDao = daoSession.getProjJobStageGridMasterDao();
            projIowMasterDao = daoSession.getProjIowMasterDao();
            projIowMaterialChildDao = daoSession.getProjIowMaterialChildDao();
            projJobMasterDao = daoSession.getProjJobMasterDao();
            projJobIowMasterDao = daoSession.getProjJobIowMasterDao();
            projUserStageListDao = daoSession.getProjUserStageListDao();
            projMrChildDao = daoSession.getProjMrChildDao();
            projMrItemScheduleChildDao = daoSession.getProjMrItemScheduleChildDao();
            projMirChildDao = daoSession.getProjMirChildDao();
            projVechicleMovementFormDao = daoSession.getProjVechicleMovementFormDao();
            projIndentMasterDao = daoSession.getProjIndentMasterDao();
            projIndentChildDao = daoSession.getProjIndentChildDao();
            projMinChildDao = daoSession.getProjMinChildDao();
            projGrnItemChildDao = daoSession.getProjGrnItemChildDao();
            projGrnMasterDao = daoSession.getProjGrnMasterDao();
            weightDataDao = daoSession.getWeightDataDao();
            projGrnOtherChargeChildDao = daoSession.getProjGrnOtherChargeChildDao();
            projBmrfMasterDao = daoSession.getProjBmrfMasterDao();
            projMatBmrfChildDao = daoSession.getProjMatBmrfChildDao();
            projMrirItemChildDao = daoSession.getProjMrirItemChildDao();
            projMrirMasterDao = daoSession.getProjMrirMasterDao();
            projMrirOtherChargeChildDao = daoSession.getProjMrirOtherChargeChildDao();
            projMtdnChildDao = daoSession.getProjMtdnChildDao();
            projMtdnMasterDao = daoSession.getProjMtdnMasterDao();
            projMtdnOtherChargeChildDao = daoSession.getProjMtdnOtherChargeChildDao();
            projMtnChildDao = daoSession.getProjMtnChildDao();
            projMtnMasterDao = daoSession.getProjMtnMasterDao();
            projMtrnMasterDao = daoSession.getProjMtrnMasterDao();
            projMtnCloseMasterDao = daoSession.getProjMtnCloseMasterDao();
            projPoBillMasterDao = daoSession.getProjPoBillMasterDao();
            projPoBillRecommendationMasterDao = daoSession.getProjPoBillRecommendationMasterDao();
            projPoBillRecommendationPaymentChildDao = daoSession.getProjPoBillRecommendationPaymentChildDao();
            projPoBillRecommendationPaymentMasterDao = daoSession.getProjPoBillRecommendationPaymentMasterDao();
            projPoBillRecommendationChildDao = daoSession.getProjPoBillRecommendationChildDao();
            projPoBillRecommendationPaymentDetChildDao = daoSession.getProjPoBillRecommendationPaymentDetChildDao();
            projPoBillItemChildDao = daoSession.getProjPoBillItemChildDao();
            projPoBillRecommendationPoChildDao = daoSession.getProjPoBillRecommendationPoChildDao();
            projPoBillOtherChargeChildDao = daoSession.getProjPoBillOtherChargeChildDao();
            projPoActBillOthersChildDao = daoSession.getProjPoActBillOthersChildDao();
            projMtanMasterDao = daoSession.getProjMtanMasterDao();
            projMtanChildDao = daoSession.getProjMtanChildDao();
            projMtanOtherChargeChildDao = daoSession.getProjMtanOtherChargeChildDao();
            projWoBillIowChildDao = daoSession.getProjWoBillIowChildDao();
            projWoBillSubActivityChildDao = daoSession.getProjWoBillSubActivityChildDao();
            projWoBillNmrChildDao = daoSession.getProjWoBillNmrChildDao();
            projMbookQaMasterDao = daoSession.getProjMbookQaMasterDao();
            projWoBillIowDetChildDao = daoSession.getProjWoBillIowDetChildDao();
            projWoBillIowTaxChildDao = daoSession.getProjWoBillIowTaxChildDao();
            projWoBillSubActivityDetChildDao = daoSession.getProjWoBillSubActivityDetChildDao();
            projWoBillNmrDetChildDao = daoSession.getProjWoBillNmrDetChildDao();
            finAccountMasterDao = daoSession.getFinAccountMasterDao();
            projWoBillRecommendationPaymentMasterDao = daoSession.getProjWoBillRecommendationPaymentMasterDao();
            projWoBillRecommendationPaymentChildDao = daoSession.getProjWoBillRecommendationPaymentChildDao();
            projMirnMasterDao = daoSession.getProjMirnMasterDao();
            projMirnChildDao = daoSession.getProjMirnChildDao();
            projMbookLabourChildDao = daoSession.getProjMbookLabourChildDao();
            getFromSession();
            return DBService.this;
        }
    }

    public void onListLoad(final String req, final TextViewPlus updateOn, final CircularProgressButton pbView, final TextViewPlus msg, final String flag) {
        String requestParameter = req;
        Log.d(TAG, requestParameter);
        BackgroundServiceCall backgroundTask = new BackgroundServiceCall(context, flag, new OnTaskCompleted() {
            @Override
            public void onTaskCompleted(String values, String flagMsg) {
                try {
                    if (flagMsg.equals("internet")) {
                        msg.setTextColor(getResources().getColor(R.color.red));
                        msg.setText(values);
                        pbView.setProgress(-1);
                        if (flag.equalsIgnoreCase("ProjectListWithStoreLoad") || flag.equalsIgnoreCase("ProjectRequestedBytLoad") || flag.equalsIgnoreCase("SatgeLoadBasedOnProjectList")
                                || flag.equalsIgnoreCase("RightsTable") || flag.equalsIgnoreCase("projUserMaterialList") || flag.equalsIgnoreCase("projUserStageList")) {
                            try {
                                String lastUpdateDate1 = "";
                                List<UpdateOnTable> TableLists = updateOnTableDao.queryBuilder().where(UpdateOnTableDao.Properties.User_id.eq(uid), UpdateOnTableDao.Properties.Table_name.eq(flag)).list();
                                TableLists.get(0).setStatus("Updated");
                                daoSession.getUpdateOnTableDao().update(TableLists.get(0));
                                if (TableLists.size() > 0) {
                                    lastUpdateDate1 = TableLists.get(0).getLast_update();
                                }
                                updateOn.setText(lastUpdateDate1);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            try {
                                String lastUpdateDate1 = "";
                                List<UpdateOnTable> TableLists = updateOnTableDao.queryBuilder().where(UpdateOnTableDao.Properties.Table_name.eq(flag)).list();
                                TableLists.get(0).setStatus("Updated");
                                daoSession.getUpdateOnTableDao().update(TableLists.get(0));
                                if (TableLists.size() > 0) {
                                    lastUpdateDate1 = TableLists.get(0).getLast_update();
                                }
                                updateOn.setText(lastUpdateDate1);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    } else {
                        JSONObject jsonObject = new JSONObject(values);
                        parseJSONResponse(jsonObject, flag, req, updateOn, pbView, msg);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        backgroundTask.execute("", "", requestParameter);
    }

    /* public void onListLoad(final String req, final TextViewPlus updateOn, final CircularProgressButton pbView, final TextViewPlus msg, final String flag) {
         String requestParameter = req;
         Log.d(TAG, requestParameter);
         if (!(Sharedpref.getPrefBoolean(context, DASHBOARDOFFLINEMODE))) {
             RestClientHelper.getInstance().getURL(requestParameter, context, new RestClientHelper.RestClientListener() {
                 @Override
                 public void onSuccess(String response) {
                     try {
                         System.out.println(flag + " --> " + response);
                         JSONObject jsonObject = new JSONObject(response);
                         parseJSONResponse(jsonObject, flag, req, updateOn, pbView, msg);
                     } catch (JSONException e) {
                         e.printStackTrace();
                     }
                 }
                 @Override
                 public void onError(String error) {
                     msg.setTextColor(getResources().getColor(R.color.red));
                     msg.setText(error);
                     pbView.setProgress(-1);
                 }
             });
         } else {
             msg.setTextColor(getResources().getColor(R.color.red));
             msg.setText("Offline Mode Enabled");
             pbView.setProgress(-1);
         }
     }
 */
    @Override
    public void onTaskRemoved(Intent rootIntent) {
        Intent restartService = new Intent(context, this.getClass());
        restartService.setPackage(getPackageName());
        int load = 0;
        daoSession = SCMApplication.daoSession;
        updateOnTableDao = daoSession.getUpdateOnTableDao();
        session = new SessionManager(getApplicationContext());
        uid = session.getUserDetails().get(SessionManager.ID);
        try {
            List<UpdateOnTable> TableLists = updateOnTableDao.queryBuilder().where(UpdateOnTableDao.Properties.User_id.eq(uid)).list();
            for (int i = 0; i < TableLists.size(); i++) {
                if (!(TableLists.get(i).getStatus().equalsIgnoreCase("Updated"))) {
                    load++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (!(load == 0)) {
            isServiceLoading = true;
            startService(restartService);
        } else {
            isServiceLoading = false;
            stopService(restartService);
        }
        super.onTaskRemoved(rootIntent);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // Log.i("Service", "Service Created");
        mainIntent = intent;
        onTaskRemoved(intent);
        return Service.START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.i("Service", "Service Destroy");
    }

    @Override
    public boolean stopService(Intent name) {
        Log.i("Service", "Service Stop");
        // TODO Auto-generated method stub
        return super.stopService(name);
    }

    private void parseJSONResponse(JSONObject responseJSONObject, String flag, String req, TextViewPlus updateOn, CircularProgressButton pbView, TextViewPlus msg) {
        try {
            if (responseJSONObject.getString(AppContants.RESPONSE_CODE_KEY).equalsIgnoreCase(AppContants.RESPONSE_CODE_VALUE_1)) {
                /*if (flag.equals("ProjectMaterialBytLoad")) {
                    JSONObject materialListJSONObject = responseJSONObject.getJSONObject("ProjectMaterialBytLoad");
                    JSONArray jsonArray = materialListJSONObject.getJSONArray("values");
                    if (jsonArray.length() > 0) {
                        materialsDao.insertOrReplace(new Materials(uid, "material", uid, jsonArray.toString()));
                        Log.d(TAG, "materialsDao Updated");
                    }
                }*/
                if (flag.equals("ProjectListWithStoreLoad")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag1 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new pjtWithStoreTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new pjtWithStoreTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjectMaterialBytLoad")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag2 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new materialTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new materialTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjectContractorLoad")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag3 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new contractorTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new contractorTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjectRequestedBytLoad")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag4 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new requestByTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new requestByTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjectVendorName")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag5 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new vendorTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new vendorTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjectStatusLoad")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag6 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new statusTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new statusTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("WoRefTable")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag7 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new woRefTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new woRefTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjIowMaterialChildTable")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag8 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new iowMaterialChildTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new iowMaterialChildTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjCmnMasterDetailsTable")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag9 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new commMasterDetailsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new commMasterDetailsTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMaterialUomChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag10 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projectMaterialUOMTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projectMaterialUOMTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("ProjectListLoad")) {
                    msg.setText("Loading...");
                    msg.setTextColor(getResources().getColor(R.color.gray));
                    JSONObject projectListJSONObject = responseJSONObject.getJSONObject("ProjectListLoad");
                    JSONArray projectListjsonArray = projectListJSONObject.getJSONArray("values");
                    flag11 = "SatgeLoadBasedOnProjectList";
                    if (projectListjsonArray.length() > 0) {
                        totalStage = projectListjsonArray.length();
                        //totalStage = 1;
                        String currentDate = responseJSONObject.getString("currentDate");
                        for (int i = 0; i < projectListjsonArray.length(); i++) {
                            updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_SatgeLoadBasedOnProjectList", "SatgeLoadBasedOnProjectList", uid, "", "Progress"));
                            String pjtId = projectListjsonArray.getJSONObject(i).getString("id");
                            String pjtName = projectListjsonArray.getJSONObject(i).getString("value");
                            String pjtNameValue = pjtName;
                            pjtName = pjtName.replace(" ", "%20");
                            // String reqParm = "{'Action':'TEMPLEWAVES','Cre_Id':'" + cr_id + "','UID':'" + uid + "'}";
                            String reqParm = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'SatgeLoadBasedOnProjectList','proj_id':'" + pjtId + "','proj_name':'" + pjtName + "'}";
                            String requ = ApiCalls.getURLfromJson(reqParm, context);
                            Log.d(TAG, "SatgeLoadBasedOnProjectList--> " + requ);
                            // Sharedpref.RemovePrefString(context, uid + "_" + pjtId);
                            new stageProjectBasedTask().execute(requ, pjtId, pjtNameValue, currentDate);
                            // new stageProjectBasedTask().execute(requ, "2", "Temple Waves", currentDate);
                            // projectsDao.insertOrReplace(new Projects(uid, "project", uid, projectListjsonArray.toString()));
                            Log.d(TAG, "projectsDao Updated");
                        }
                    } else {
                        if (msg11 != null) {
                            updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag11, flag11, uid, responseJSONObject.getString("currentDate"), "Updated"));
                            updateOn11.setText(responseJSONObject.getString("currentDate"));
                            progress11.setProgress(100);
                            msg11.setText("Update Success");
                            msg11.setTextColor(getResources().getColor(R.color.dark_green));
                        }
                    }
                } else if (flag.equals("SatgeLoadBasedOnProjectList")) {
                   /* msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));*/
                    //Update StageList
                    /*JSONObject PjtStageJSONObject = responseJSONObject.getJSONObject("SatgeLoadBasedOnProjectList");
                    JSONArray PjtStageListjsonArray = PjtStageJSONObject.getJSONArray("values");
                    if (PjtStageListjsonArray.length() > 0) {
                        for (int i = 0; i < PjtStageListjsonArray.length(); i++) {
                            stageListDao.insertOrReplace(new StageList(PjtStageListjsonArray.getJSONObject(i).getString("id"), uid, PjtStageListjsonArray.getJSONObject(i).getString("value"), PjtStageListjsonArray.getJSONObject(i).getString("StageValue")));
                            Log.d(TAG, "StageListDao Updated");
                        }
                    }*/
                    flag11 = flag;
                    //  new stageProjectBasedTask().execute(responseJSONObject);
                   /* msg.setText("Update Success");
                    msg.setTextColor(getResources().getColor(R.color.dark_green));*/
                } else if (flag.equals("RightsTable")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag12 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new rightsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new rightsTask().execute(responseJSONObject);
                    }
                } else if (flag.equals("proj_mir_proc_child")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag13 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new proj_mir_proc_child().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new proj_mir_proc_child().execute(responseJSONObject);
                    }
                } else if (flag.equals("proj_mir_master")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag14 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new proj_mir_master().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new proj_mir_master().execute(responseJSONObject);
                    }
                } else if (flag.equals("proj_min_proc_child")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag15 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new proj_min_proc_child().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new proj_min_proc_child().execute(responseJSONObject);
                    }
                } else if (flag.equals("proj_min_master")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag16 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new proj_min_master().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new proj_min_master().execute(responseJSONObject);
                    }
                } else if (flag.equals("proj_mr_proc_child")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag17 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new proj_mr_proc_child().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new proj_mr_proc_child().execute(responseJSONObject);
                    }
                } else if (flag.equals("mobileRightsKeyMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag18 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new mobileRightsKeyMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new mobileRightsKeyMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("admEmpMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag19 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new admEmpMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new admEmpMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projUserMaterialList")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag20 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projUserMaterialList().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projUserMaterialList().execute(responseJSONObject);
                    }
                } else if (flag.equals("projAlternateMaterialMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag21 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projAlternateMaterialMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projAlternateMaterialMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("mobileRightsMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag22 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new mobileRightsMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new mobileRightsMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMaterialChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag23 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMaterialChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMaterialChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag24 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoItemChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag25 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoItemChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoItemChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projJobIowStageMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag26 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projJobIowStageMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projJobIowStageMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projStageIowMaterialDet")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag27 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projStageIowMaterialDet().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projStageIowMaterialDet().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMrMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag28 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMrMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMrMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projVendorMasterView")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag29 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projVendorMasterView().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projVendorMasterView().execute(responseJSONObject);
                    }
                } else if (flag.equals("admEmpMasterView")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag30 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new admEmpMasterView().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new admEmpMasterView().execute(responseJSONObject);
                    }
                } else if (flag.equals("arcApprovalConfig")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag31 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new arcApprovalConfig().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new arcApprovalConfig().execute(responseJSONObject);
                    }
                } else if (flag.equals("projUserProjectList")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag32 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projUserProjectList().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projUserProjectList().execute(responseJSONObject);
                    }
                } else if (flag.equals("projStoreStock")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag33 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projStoreStock().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projStoreStock().execute(responseJSONObject);
                    }
                } else if (flag.equals("projStoreMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag34 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projStoreMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projStoreMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projProjectAddressMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag35 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projProjectAddressMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projProjectAddressMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoOtherChargeChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag36 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoOtherChargeChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoOtherChargeChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("cmnPartyAddressInfo")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag37 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new cmnPartyAddressInfo().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new cmnPartyAddressInfo().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoGernalTermsChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag38 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoGernalTermsChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoGernalTermsChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoTermsChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag39 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoTermsChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoTermsChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("cmnTaxMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag40 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new cmnTaxMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new cmnTaxMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("cmnPartyCompanyInfo")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag41 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new cmnPartyCompanyInfo().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new cmnPartyCompanyInfo().execute(responseJSONObject);
                    }
                } else if (flag.equals("cmnPartyIdDocInfo")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag42 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new cmnPartyIdDocInfo().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new cmnPartyIdDocInfo().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMbookMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag43 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projContractorMasterView")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag44 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projContractorMasterView().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projContractorMasterView().execute(responseJSONObject);
                    }
                } else if (flag.equals("projProjectMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag45 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projProjectMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projProjectMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMbookSubActivityChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag46 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookSubActivityChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookSubActivityChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMbookIowNmrChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag47 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookIowNmrChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookIowNmrChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMbookiowChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag48 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookiowChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookiowChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projStageChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag49 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projStageChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projStageChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projLabourMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag50 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projLabourMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projLabourMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projFormulaMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag51 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projFormulaMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projFormulaMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMbookIowGridChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag52 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookIowGridChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookIowGridChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projJobStageGridIow")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag53 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projJobStageGridIow().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projJobStageGridIow().execute(responseJSONObject);
                    }
                } else if (flag.equals("projJobStageGridMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag54 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projJobStageGridMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projJobStageGridMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projIowMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag55 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projIowMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projIowMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projIowMaterialChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag56 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projIowMaterialChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projIowMaterialChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projJobMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag57 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projJobMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projJobMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projJobIowMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag58 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projJobIowMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projJobIowMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projUserStageList")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag59 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projUserStageList().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projUserStageList().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMrChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag60 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMrChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMrChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMrItemScheduleChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag61 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMrItemScheduleChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMrItemScheduleChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMirChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag62 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMirChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMirChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projVechicleMovementForm")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag63 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projVechicleMovementForm().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projVechicleMovementForm().execute(responseJSONObject);
                    }
                } else if (flag.equals("projIndentMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag64 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projIndentMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projIndentMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projIndentChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag65 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projIndentChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projIndentChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMinChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag66 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMinChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMinChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projGrnMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag67 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projGrnMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projGrnMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projGrnItemChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag68 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projGrnItemChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projGrnItemChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("weightData")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag69 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new weightData().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new weightData().execute(responseJSONObject);
                    }
                } else if (flag.equals("projGrnOtherChargeChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag70 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projGrnOtherChargeChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projGrnOtherChargeChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projBmrfMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag71 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projBmrfMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projBmrfMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMatBmrfChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag72 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMatBmrfChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMatBmrfChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMrirMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag73 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMrirMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMrirMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMrirItemChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag74 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMrirItemChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMrirItemChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMrirOtherChargeChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag75 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMrirOtherChargeChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMrirOtherChargeChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtdnMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag76 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtdnMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtdnMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtdnChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag77 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtdnChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtdnChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtdnOtherChargeChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag78 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtdnOtherChargeChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtdnOtherChargeChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtnMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag79 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtnMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtnMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtnChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag80 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtnChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtnChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtrnMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag81 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtrnMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtrnMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtnCloseMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag82 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtnCloseMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtnCloseMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillRecommendationMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag83 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillRecommendationMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillRecommendationMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag84 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillRecommendationChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag85 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillRecommendationChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillRecommendationChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillRecommendationPaymentChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag86 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillRecommendationPaymentChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillRecommendationPaymentChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillRecommendationPaymentMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag87 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillRecommendationPaymentMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillRecommendationPaymentMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillRecommendationPoChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag88 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillRecommendationPoChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillRecommendationPoChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillItemChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag89 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillItemChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillItemChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillRecommendationPaymentDetChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag90 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillRecommendationPaymentDetChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillRecommendationPaymentDetChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoActBillOthersChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag91 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoActBillOthersChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoActBillOthersChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projPoBillOtherChargeChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag92 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projPoBillOtherChargeChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projPoBillOtherChargeChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtanMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag93 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtanMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtanMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtanChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag94 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtanChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtanChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMtanOtherChargeChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag95 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMtanOtherChargeChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMtanOtherChargeChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillIowChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag96 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillIowChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillIowChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillSubActivityChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag97 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillSubActivityChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillSubActivityChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillNmrChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag98 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillNmrChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillNmrChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projMbookQaMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag99 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookQaMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookQaMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillIowDetChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag100 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillIowDetChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillIowDetChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillIowTaxChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag101 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillIowTaxChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillIowTaxChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillSubActivityDetChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag102 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillSubActivityDetChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillSubActivityDetChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillNmrDetChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag103 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillNmrDetChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillNmrDetChild().execute(responseJSONObject);
                    }
                } else if (flag.equals("finAccountMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag104 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new finAccountMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new finAccountMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillRecommendationPaymentMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag105 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillRecommendationPaymentMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillRecommendationPaymentMaster().execute(responseJSONObject);
                    }
                } else if (flag.equals("projWoBillRecommendationPaymentChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag106 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projWoBillRecommendationPaymentChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projWoBillRecommendationPaymentChild().execute(responseJSONObject);
                    }
                }else if (flag.equals("projMirnMaster")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag107 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMirnMaster().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMirnMaster().execute(responseJSONObject);
                    }
                }else if (flag.equals("projMirnChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag108 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMirnChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMirnChild().execute(responseJSONObject);
                    }
                }else if (flag.equals("projMbookLabourChild")) {
                    msg.setText("InProgress...");
                    msg.setTextColor(getResources().getColor(R.color.blue_bg));
                    flag109 = flag;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        new projMbookLabourChild().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, responseJSONObject);
                    } else {
                        new projMbookLabourChild().execute(responseJSONObject);
                    }
                }
                // Sharedpref.SetPrefString(context, AppContants.LAST_DB_UPDATED_DATE, FormValidation.getCurrentDate());
            } else if (responseJSONObject.getString(AppContants.RESPONSE_CODE_KEY).equalsIgnoreCase(AppContants.RESPONSE_CODE_VALUE_403)) {
                msg.setText(responseJSONObject.getString(AppContants.RESPONSE_MESSAGE));
                msg.setTextColor(getResources().getColor(R.color.red));
                pbView.setProgress(-1);
            } else {
                msg.setText(responseJSONObject.getString(AppContants.RESPONSE_MESSAGE));
                msg.setTextColor(getResources().getColor(R.color.red));
                pbView.setProgress(-1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void isService(Intent intent) {
        int load = 0;
        daoSession = ((SCMApplication) context.getApplicationContext()).getDaoSession();
        updateOnTableDao = daoSession.getUpdateOnTableDao();
        session = new SessionManager(getApplicationContext());
        uid = session.getUserDetails().get(SessionManager.ID);
        try {
            List<UpdateOnTable> TableLists = updateOnTableDao.queryBuilder().where(UpdateOnTableDao.Properties.User_id.eq(uid)).list();
            for (int i = 0; i < TableLists.size(); i++) {
                if (!(TableLists.get(i).getStatus().equalsIgnoreCase("Updated"))) {
                    load++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (!(load == 0)) {
            onTaskRemoved(intent);
        }
    }

    public class pjtWithStoreTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag1, flag1, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.bindString(1, uid + "_" + flag1);
            insertStatement.bindString(2, flag1);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject PjtStoreJSONObject = matObject.getJSONObject("ProjectListWithStoreLoad");
                JSONArray PjtstoreListjsonArray = PjtStoreJSONObject.getJSONArray("values");
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag1, flag1, uid, "", "Updating"));
                if (PjtstoreListjsonArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + PjtsStoreDao.getTablename()
                            + " values (?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < PjtstoreListjsonArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, uid + "_" + PjtstoreListjsonArray.getJSONObject(i).getString("id"));
                        insertStatement.bindString(2, PjtstoreListjsonArray.getJSONObject(i).getString("id"));
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, PjtstoreListjsonArray.getJSONObject(i).getString("value"));
                        insertStatement.bindString(5, PjtstoreListjsonArray.getJSONObject(i).getString("StoreValue"));
                        insertStatement.execute();
                        Log.d("Store", "StoreMasterDao Inserted " + (i + 1));
                        /*Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + PjtstoreListjsonArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg1 != null) {
                                    if (msg1.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg1.setText("Database inserting...");
                                        msg1.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress1.setProgress(99);
                                    else if (pbValue == 0)
                                        progress1.setProgress(1);
                                    else
                                        progress1.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Store Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.bindString(1, uid + "_" + flag1);
            insertStatement.bindString(2, flag1);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg1 != null) {
                updateOn1.setText(updateDate);
                progress1.setProgress(100);
                msg1.setText("Update Success");
                msg1.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class materialTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag2, flag2, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag2);
            insertStatement.bindString(2, flag2);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag2, flag2, uid, "", "Updating"));
                JSONObject materialMasterListJSONObject = matObject.getJSONObject("ProjectMaterialBytLoad");
                JSONArray MaterialMasterListjsonArray = materialMasterListJSONObject.getJSONArray("values");
                if (MaterialMasterListjsonArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + materialsMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < MaterialMasterListjsonArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, MaterialMasterListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, MaterialMasterListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, MaterialMasterListjsonArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(5, MaterialMasterListjsonArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(6, MaterialMasterListjsonArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(7, MaterialMasterListjsonArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(8, MaterialMasterListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(9, MaterialMasterListjsonArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(10, MaterialMasterListjsonArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, MaterialMasterListjsonArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, MaterialMasterListjsonArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, MaterialMasterListjsonArray.getJSONObject(i).getString("b"));
                        insertStatement.execute();
                        // Log.d("Material", "MaterialsMasterDao Inserted " + (i + 1));
                       /* Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + MaterialMasterListjsonArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg2 != null) {
                                    if (msg2.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg2.setText("Database inserting...");
                                        msg2.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress2.setProgress(99);
                                    else if (pbValue == 0)
                                        progress2.setProgress(1);
                                    else
                                        progress2.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Material Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag2);
            insertStatement.bindString(2, flag2);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg2 != null) {
                updateOn2.setText(updateDate);
                progress2.setProgress(100);
                msg2.setText("Update Success");
                msg2.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class contractorTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag3, flag3, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag3);
            insertStatement.bindString(2, flag3);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag3, flag3, uid, updateDate, "Updating"));
                JSONObject contractorJSONObject = matObject.getJSONObject("ProjectContractorLoad");
                SCMLoadListModel contractorListModel = gson.fromJson(contractorJSONObject.toString(), SCMLoadListModel.class);
                if (contractorListModel.getValues().size() > 0) {
                    String insertSql = "Insert or Replace into " + contractorsDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < contractorListModel.getValues().size(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, contractorListModel.getValues().get(i).getId());
                        insertStatement.bindString(2, contractorListModel.getValues().get(i).getId());
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, contractorListModel.getValues().get(i).getValue());
                        insertStatement.bindString(5, contractorListModel.getValues().get(i).getStatus());
                        insertStatement.bindString(6, contractorListModel.getValues().get(i).getDisplay());
                        insertStatement.bindString(7, contractorListModel.getValues().get(i).getFreeze());
                        insertStatement.bindString(8, contractorListModel.getValues().get(i).getPaymentFreeze());
                        insertStatement.bindString(9, contractorListModel.getValues().get(i).getPartyId());
                        insertStatement.execute();
                       /* Log.d("Contractor", "ContractorMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + contractorListModel.getValues().size())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg3 != null) {
                                    if (msg3.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg3.setText("Database inserting...");
                                        msg3.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress3.setProgress(99);
                                    else if (pbValue == 0)
                                        progress3.setProgress(1);
                                    else
                                        progress3.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Contractor Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag3);
            insertStatement.bindString(2, flag3);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg3 != null) {
                updateOn3.setText(updateDate);
                progress3.setProgress(100);
                msg3.setText("Update Success");
                msg3.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class requestByTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag4, flag4, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag4);
            insertStatement.bindString(2, flag4);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag4, flag4, uid, updateDate, "Updating"));
                JSONObject requestedByListJSONObject = matObject.getJSONObject("ProjectRequestedBytLoad");
                SCMLoadListModel requestedByListModel = gson.fromJson(requestedByListJSONObject.toString(), SCMLoadListModel.class);
                if (requestedByListModel.getValues().size() > 0) {
                    String insertSql = "Insert or Replace into " + requestedByDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < requestedByListModel.getValues().size(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, uid + "_" + requestedByListModel.getValues().get(i).getId());
                        insertStatement.bindString(2, requestedByListModel.getValues().get(i).getId());
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, requestedByListModel.getValues().get(i).getValue());
                        insertStatement.bindString(5, requestedByListModel.getValues().get(i).getStatus());
                        insertStatement.bindString(6, requestedByListModel.getValues().get(i).getDisplay());
                        insertStatement.execute();
                       /* Log.d("All User", "All UserMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + requestedByListModel.getValues().size())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg4 != null) {
                                    if (msg4.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg4.setText("Database inserting...");
                                        msg4.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress4.setProgress(99);
                                    else if (pbValue == 0)
                                        progress4.setProgress(1);
                                    else
                                        progress4.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "All User Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag4);
            insertStatement.bindString(2, flag4);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg4 != null) {
                updateOn4.setText(updateDate);
                progress4.setProgress(100);
                msg4.setText("Update Success");
                msg4.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class vendorTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag5, flag5, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag5);
            insertStatement.bindString(2, flag5);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag5, flag5, uid, updateDate, "Updating"));
                JSONObject vendorListJSONObject = matObject.getJSONObject("ProjectVendorName");
                SCMLoadListModel vendorListModel = gson.fromJson(vendorListJSONObject.toString(), SCMLoadListModel.class);
                if (vendorListModel.getValues().size() > 0) {
                    String insertSql = "Insert or Replace into " + vendorNameDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < vendorListModel.getValues().size(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, vendorListModel.getValues().get(i).getId());
                        insertStatement.bindString(2, vendorListModel.getValues().get(i).getId());
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, vendorListModel.getValues().get(i).getValue());
                        insertStatement.bindString(5, vendorListModel.getValues().get(i).getStatus());
                        insertStatement.bindString(6, vendorListModel.getValues().get(i).getFreeze());
                        insertStatement.bindString(7, vendorListModel.getValues().get(i).getId());
                        insertStatement.bindString(8, vendorListModel.getValues().get(i).getVendorCode());
                        insertStatement.bindString(9, vendorListModel.getValues().get(i).getPartyId());
                        insertStatement.bindString(10, vendorListModel.getValues().get(i).getPaymentFreeze());
                        insertStatement.execute();
                        /*Log.d("Vendor Name", "Vendor Name MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + vendorListModel.getValues().size())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg5 != null) {
                                    if (msg5.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg5.setText("Database inserting...");
                                        msg5.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress5.setProgress(99);
                                    else if (pbValue == 0)
                                        progress5.setProgress(1);
                                    else
                                        progress5.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Vendor Name Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag5);
            insertStatement.bindString(2, flag5);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg5 != null) {
                updateOn5.setText(updateDate);
                progress5.setProgress(100);
                msg5.setText("Update Success");
                msg5.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class statusTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag6, flag6, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag6);
            insertStatement.bindString(2, flag6);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag6, flag6, uid, updateDate, "Updating"));
                JSONObject projectStatusJSONObject = matObject.getJSONObject("ProjectStatusLoad");
                SCMLoadListModel statusListModel = gson.fromJson(projectStatusJSONObject.toString(), SCMLoadListModel.class);
                if (statusListModel.getValues().size() > 0) {
                    String insertSql = "Insert or Replace into " + statusDao.getTablename()
                            + " values (?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < statusListModel.getValues().size(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, statusListModel.getValues().get(i).getId());
                        insertStatement.bindString(2, statusListModel.getValues().get(i).getId());
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, statusListModel.getValues().get(i).getValue());
                        insertStatement.bindString(5, statusListModel.getValues().get(i).getStatus());
                        insertStatement.execute();
                        /*Log.d("Status", "Status MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + statusListModel.getValues().size())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg6 != null) {
                                    if (msg6.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg6.setText("Database inserting...");
                                        msg6.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress6.setProgress(99);
                                    else if (pbValue == 0)
                                        progress6.setProgress(1);
                                    else
                                        progress6.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Status Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag6);
            insertStatement.bindString(2, flag6);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg6 != null) {
                updateOn6.setText(updateDate);
                progress6.setProgress(100);
                msg6.setText("Update Success");
                msg6.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class woRefTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag7, flag7, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag7);
            insertStatement.bindString(2, flag7);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag7, flag7, uid, updateDate, "Updating"));
                JSONArray woRefListjsonArray = matObject.getJSONArray("WoRefTable");
                if (woRefListjsonArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projWoMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < woRefListjsonArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, woRefListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, woRefListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(3, uid);
                        insertStatement.bindLong(4, Integer.parseInt(woRefListjsonArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(5, woRefListjsonArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(6, woRefListjsonArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(7, woRefListjsonArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(8, woRefListjsonArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(9, woRefListjsonArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(10, woRefListjsonArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(11, woRefListjsonArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(12, woRefListjsonArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(13, woRefListjsonArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(14, woRefListjsonArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(15, woRefListjsonArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(16, woRefListjsonArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(17, woRefListjsonArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(18, woRefListjsonArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(19, woRefListjsonArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(20, woRefListjsonArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(21, woRefListjsonArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(22, woRefListjsonArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(23, woRefListjsonArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(24, woRefListjsonArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(25, woRefListjsonArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(26, woRefListjsonArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(27, woRefListjsonArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(28, woRefListjsonArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(29, woRefListjsonArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(30, woRefListjsonArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(31, woRefListjsonArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(32, woRefListjsonArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(33, woRefListjsonArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(34, woRefListjsonArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(35, woRefListjsonArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(36, woRefListjsonArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(37, woRefListjsonArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(38, woRefListjsonArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(39, woRefListjsonArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(40, woRefListjsonArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(41, woRefListjsonArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(42, woRefListjsonArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(43, woRefListjsonArray.getJSONObject(i).getString("an"));
                        insertStatement.bindString(44, woRefListjsonArray.getJSONObject(i).getString("ao"));
                        insertStatement.bindString(45, woRefListjsonArray.getJSONObject(i).getString("ap"));
                        insertStatement.bindString(46, woRefListjsonArray.getJSONObject(i).getString("aq"));
                        insertStatement.bindString(47, woRefListjsonArray.getJSONObject(i).getString("ar"));
                        insertStatement.bindString(48, woRefListjsonArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(49, woRefListjsonArray.getJSONObject(i).getString("at"));
                        insertStatement.bindString(50, woRefListjsonArray.getJSONObject(i).getString("au"));
                        insertStatement.bindString(51, woRefListjsonArray.getJSONObject(i).getString("av"));
                        insertStatement.bindString(52, woRefListjsonArray.getJSONObject(i).getString("aw"));
                        insertStatement.bindString(53, woRefListjsonArray.getJSONObject(i).getString("ax"));
                        insertStatement.bindString(54, woRefListjsonArray.getJSONObject(i).getString("ay"));
                        insertStatement.bindString(55, woRefListjsonArray.getJSONObject(i).getString("az"));
                        insertStatement.bindString(56, woRefListjsonArray.getJSONObject(i).getString("ba"));
                        insertStatement.bindString(57, woRefListjsonArray.getJSONObject(i).getString("bb"));
                        insertStatement.bindString(58, woRefListjsonArray.getJSONObject(i).getString("bc"));
                        insertStatement.bindString(59, woRefListjsonArray.getJSONObject(i).getString("bd"));
                        insertStatement.bindString(60, woRefListjsonArray.getJSONObject(i).getString("be"));
                        insertStatement.bindString(61, woRefListjsonArray.getJSONObject(i).getString("bf"));
                        insertStatement.bindString(62, woRefListjsonArray.getJSONObject(i).getString("bg"));
                        insertStatement.bindString(63, woRefListjsonArray.getJSONObject(i).getString("bh"));
                        insertStatement.bindString(64, woRefListjsonArray.getJSONObject(i).getString("bi"));
                        insertStatement.bindString(65, woRefListjsonArray.getJSONObject(i).getString("bj"));
                        insertStatement.bindString(66, woRefListjsonArray.getJSONObject(i).getString("bk"));
                        insertStatement.bindString(67, woRefListjsonArray.getJSONObject(i).getString("bl"));
                        insertStatement.bindString(68, woRefListjsonArray.getJSONObject(i).getString("bm"));
                        insertStatement.bindString(69, woRefListjsonArray.getJSONObject(i).getString("bn"));
                        insertStatement.bindString(70, woRefListjsonArray.getJSONObject(i).getString("bo"));
                        insertStatement.bindString(71, woRefListjsonArray.getJSONObject(i).getString("bp"));
                        insertStatement.execute();
                       /* Log.d("Wo Details", "Wo DetailsDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + woRefListjsonArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg7 != null) {
                                    if (msg7.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg7.setText("Database inserting...");
                                        msg7.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress7.setProgress(99);
                                    else if (pbValue == 0)
                                        progress7.setProgress(1);
                                    else
                                        progress7.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Wo Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag7);
            insertStatement.bindString(2, flag7);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg7 != null) {
                updateOn7.setText(updateDate);
                progress7.setProgress(100);
                msg7.setText("Update Success");
                msg7.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class iowMaterialChildTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //  updateOnTableDao.insertOrReplace(new UpdateOnTable(flag8, flag8, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag8);
            insertStatement.bindString(2, flag8);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag8, flag8, uid, updateDate, "Updating"));
                JSONArray iowChildListjsonArray = matObject.getJSONArray("ProjIowMaterialChildTable");
                if (iowChildListjsonArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + iowMaterialChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < iowChildListjsonArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, iowChildListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, iowChildListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, iowChildListjsonArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, iowChildListjsonArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, iowChildListjsonArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(7, iowChildListjsonArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(8, iowChildListjsonArray.getJSONObject(i).getString("f"));
                        insertStatement.bindDouble(9, Double.parseDouble(iowChildListjsonArray.getJSONObject(i).getString("g")));
                        insertStatement.bindDouble(10, Double.parseDouble(iowChildListjsonArray.getJSONObject(i).getString("h")));
                        insertStatement.bindDouble(11, Double.parseDouble(iowChildListjsonArray.getJSONObject(i).getString("i")));
                        insertStatement.bindString(12, iowChildListjsonArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                        /*Log.d("IOW Material Child", "IOW Material Child MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + iowChildListjsonArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg8 != null) {
                                    if (msg8.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg8.setText("Database inserting...");
                                        msg8.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress8.setProgress(99);
                                    else if (pbValue == 0)
                                        progress8.setProgress(1);
                                    else
                                        progress8.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "IOW Material Child Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag8);
            insertStatement.bindString(2, flag8);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg8 != null) {
                updateOn8.setText(updateDate);
                progress8.setProgress(100);
                msg8.setText("Update Success");
                msg8.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class commMasterDetailsTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag9, flag9, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag9);
            insertStatement.bindString(2, flag9);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag9, flag9, uid, updateDate, "Updating"));
                JSONArray commMasterDetailsListjsonArray = matObject.getJSONArray("ProjCmnMasterDetailsTable");
                if (commMasterDetailsListjsonArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + commMasterDetailsDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < commMasterDetailsListjsonArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, commMasterDetailsListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, commMasterDetailsListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, commMasterDetailsListjsonArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, commMasterDetailsListjsonArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, commMasterDetailsListjsonArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, commMasterDetailsListjsonArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, commMasterDetailsListjsonArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, commMasterDetailsListjsonArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, commMasterDetailsListjsonArray.getJSONObject(i).getString("h"));
                        insertStatement.execute();
                       /* Log.d("Master Details", "Master Details Dao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + commMasterDetailsListjsonArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg9 != null) {
                                    if (msg9.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg9.setText("Database inserting...");
                                        msg9.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress9.setProgress(99);
                                    else if (pbValue == 0)
                                        progress9.setProgress(1);
                                    else
                                        progress9.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag9);
            insertStatement.bindString(2, flag9);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg9 != null) {
                updateOn9.setText(updateDate);
                progress9.setProgress(100);
                msg9.setText("Update Success");
                msg9.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projectMaterialUOMTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag10, flag10, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag10);
            insertStatement.bindString(2, flag10);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //  updateOnTableDao.insertOrReplace(new UpdateOnTable(flag10, flag10, uid, updateDate, "Updating"));
                JSONArray MaterialUOMListjsonArray = matObject.getJSONArray("projMaterialUomChild");
                if (MaterialUOMListjsonArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + uomMaterialChildDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < MaterialUOMListjsonArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, MaterialUOMListjsonArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, MaterialUOMListjsonArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(3, uid);
                        insertStatement.bindString(4, MaterialUOMListjsonArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(5, MaterialUOMListjsonArray.getJSONObject(i).getString("d"));
                        insertStatement.bindDouble(6, Double.parseDouble(MaterialUOMListjsonArray.getJSONObject(i).getString("f")));
                        insertStatement.execute();
                       /* Log.d("Material UOM Child", "Material UOM Child Master Dao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + MaterialUOMListjsonArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg10 != null) {
                                    if (msg10.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg10.setText("Database inserting...");
                                        msg10.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress10.setProgress(99);
                                    else if (pbValue == 0)
                                        progress10.setProgress(1);
                                    else
                                        progress10.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Material UOM Child Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag10);
            insertStatement.bindString(2, flag10);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg10 != null) {
                updateOn10.setText(updateDate);
                progress10.setProgress(100);
                msg10.setText("Update Success");
                msg10.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class stageProjectBasedTask extends AsyncTask<String, String, String> {
        @Override
        protected void onPreExecute() {
        }

        @Override
        protected String doInBackground(String... params) {
            Log.d("yourTag", "long running service task");
            // stageListDao.queryBuilder().where(StageListDao.Properties.User_id.eq(uid), StageListDao.Properties.Pjt_id.eq(params[1])).buildDelete();
            final DeleteQuery<StageList> tableDeleteQuery = daoSession.queryBuilder(StageList.class)
                    .where(StageListDao.Properties.User_id.eq(uid), StageListDao.Properties.Pjt_id.eq(params[1]))
                    .buildDelete();
            tableDeleteQuery.executeDeleteWithoutDetachingEntities();
            daoSession.clear();
            Intent intent = new Intent();
            Notification notification;
            final PendingIntent pendingIntent = PendingIntent.getActivity(
                    getApplicationContext(), 0, intent, 0);
            notification = new Notification(R.drawable.eapicon,
                    "Uploading file", System.currentTimeMillis());
            notification.flags = notification.flags
                    | Notification.FLAG_ONGOING_EVENT;
            notification.contentView = new RemoteViews(getApplicationContext()
                    .getPackageName(), R.layout.notification_syn);
            notification.contentIntent = pendingIntent;
            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                    "Updating Database...");
            notificationManager = (NotificationManager) getApplicationContext()
                    .getSystemService(Context.NOTIFICATION_SERVICE);
            notification.contentView.setTextViewText(R.id.loader_msg_text_view, params[2] + " Loading..." + "(" + incrementStage + "/" + totalStage + ")");
            notification.contentView.setProgressBar(R.id.progressBar, totalStage, incrementStage, false);
            notificationManager.notify(notiId, notification);
            String updateDate = "";
            InputStream is = null;
            String result = "";
            String result1 = "";
            HttpGet httppost;
            HttpEntity entity;
            BufferedReader bufferedReader = null;
            try {
                HttpClient httpclient = new DefaultHttpClient();
                httppost = new HttpGet(params[0]);
                HttpResponse response = httpclient.execute(httppost);
                entity = response.getEntity();
                is = entity.getContent();
                Log.e("log_tag", "connection success ");
            } catch (Exception e) {
                Log.e("log_tag", "Error in http connection" + e.toString());
                // throw new CustomException("Could not establish network connection");
            }
            // convert response to string
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int a = 0;
                int sno = 0;
                int c;
                byte buffer[] = new byte[1024];
                updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag11, flag11, uid, updateDate, "Updating"));
                while ((c = is.read(buffer)) > -1) {
                    //**OutOfMemory Exception.**
                    // baos.write(buffer, 0, c);
                    a++;
                    baos.write(buffer, 0, c);
                    if (a % 500 == 0) {
                        byte[] data = baos.toByteArray();
                        result = new String(data, 0, data.length, "utf-8");
                        stageListDao.insertOrReplace(new StageList(sno + "_" + uid + "_" + params[1], params[1], uid, params[2], result));
                        baos = new ByteArrayOutputStream();
                        sno++;
                    }
                }
                Log.d("Buffer Length", "" + a);
                byte[] data = baos.toByteArray();
                is.close();
                result1 = new String(data, 0, data.length, "utf-8");
                stageListDao.insertOrReplace(new StageList(sno + "_" + uid + "_" + params[1], params[1], uid, params[2], result1));
            } catch (Exception e) {
                Log.e("log_tag", "Error converting result " + e.toString());
                // throw new CustomException("Error parsing the response");
            }
            // StageService parentNode = gson.fromJson(result, StageService.class);
            // Sharedpref.SetPrefString(context,uid + "_" + parentNode.getid(),result + result1 + result2 + result3 + result4 + result5 + result6 + result7 + result8 + result9 + result10 + result11 + result12 + result13 + result14 + result15 + result16 + result17 + result18 + result19 + result20 + result21
            //       + result22 + result23 + result24 + result25 + result26 + result27 + result28 + result29 + result30 + result31 + result32 + result33 + result34 + result35 + result36 + result37 + result38 + result39 + result40);
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag11, flag11, uid, updateDate, "Updating"));
            // stageListDao.insertOrReplace(new StageList(uid + "_" + parentNode.getid(), parentNode.getid(), uid, parentNode.getvalue(), ""+a, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20));
            // stageListSecond.insertOrReplace(new StageListSecond(uid + "_" + parentNode.getid(), parentNode.getid(), uid, parentNode.getvalue(), result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34, result35, result36, result37, result38, result39, result40));
            //  stageListThirdDao.insertOrReplace(new StageListThird(uid + "_" + parentNode.getid(), parentNode.getid(), uid, parentNode.getvalue(), result41, result42, result43, result44, result45, result46, result47, result48, result49, result50, result51, result52, result53, result54, result55, result56, result57, result58, result59, result60));
            //  Sharedpref.SetPrefString(context, uid + "_" + parentNode.getid(), result41);
            Log.d(TAG, "StageListDao Updated");
            updateDate = params[3];
            //updateDate = DateFormat.getDateTimeInstance().format(new Date());
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            incrementStage++;
            if (incrementStage <= totalStage)
                if (totalStage == incrementStage) {
                    String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                            + " values (?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    insertStatement.clearBindings();
                    insertStatement.bindString(1, uid + "_" + flag11);
                    insertStatement.bindString(2, flag11);
                    insertStatement.bindString(3, uid);
                    insertStatement.bindString(4, updateDate);
                    insertStatement.bindString(5, "Updated");
                    insertStatement.execute();
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                    if (msg11 != null) {
                        updateOn11.setText(updateDate);
                        progress11.setProgress(100);
                        msg11.setText("Update Success");
                        msg11.setTextColor(getResources().getColor(R.color.dark_green));
                    }
                    Intent intent = new Intent();
                    Notification notification;
                    final PendingIntent pendingIntent = PendingIntent.getActivity(
                            getApplicationContext(), 0, intent, 0);
                    notification = new Notification(R.drawable.eapicon,
                            "Uploading file", System.currentTimeMillis());
                    notification.flags = notification.flags
                            | Notification.FLAG_ONGOING_EVENT;
                    notification.contentView = new RemoteViews(getApplicationContext()
                            .getPackageName(), R.layout.notification_syn);
                    notification.contentIntent = pendingIntent;
                    notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                    notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                            "Updating Database...");
                    notificationManager = (NotificationManager) getApplicationContext()
                            .getSystemService(Context.NOTIFICATION_SERVICE);
                    notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Stage Master Updating...(" + incrementStage + "/" + totalStage + ")");
                    notification.contentView.setProgressBar(R.id.progressBar, totalStage, incrementStage, false);
                    notificationManager.notify(notiId, notification);
                    if (notificationManager != null)
                        notificationManager.cancel(notiId);
                } else {
                    updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag11, flag11, uid, updateDate, "Updating"));
                    if (msg11 != null) {
                        Float divValue = ((Float.parseFloat("" + incrementStage) / Float.parseFloat("" + totalStage)) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progress11.setProgress(pbValue);
                        msg11.setText("Database inserting...");
                        msg11.setTextColor(getResources().getColor(R.color.black));
                    }
                    Intent intent = new Intent();
                    Notification notification;
                    final PendingIntent pendingIntent = PendingIntent.getActivity(
                            getApplicationContext(), 0, intent, 0);
                    notification = new Notification(R.drawable.eapicon,
                            "Uploading file", System.currentTimeMillis());
                    notification.flags = notification.flags
                            | Notification.FLAG_ONGOING_EVENT;
                    notification.contentView = new RemoteViews(getApplicationContext()
                            .getPackageName(), R.layout.notification_syn);
                    notification.contentIntent = pendingIntent;
                    notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                    notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                            "Updating Database...");
                    notificationManager = (NotificationManager) getApplicationContext()
                            .getSystemService(Context.NOTIFICATION_SERVICE);
                    notification.contentView.setTextViewText(R.id.loader_msg_text_view, flag11 + " Updating...(" + incrementStage + "/" + totalStage + ")");
                    notification.contentView.setProgressBar(R.id.progressBar, totalStage, incrementStage, false);
                    notificationManager.notify(notiId, notification);
                }
        }
    }

    public class rightsTask extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag12, flag12, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag12);
            insertStatement.bindString(2, flag12);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag12, flag12, uid, updateDate, "Updating"));
                rightsTableDao.insertOrReplace(new RightsTable(uid, matObject.toString(), uid));
                updateDate = matObject.getString("currentDate");
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag12);
            insertStatement.bindString(2, flag12);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg12 != null) {
                updateOn12.setText(updateDate);
                progress12.setProgress(100);
                msg12.setText("Update Success");
                msg12.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class proj_mir_proc_child extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag13, flag13, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag13);
            insertStatement.bindString(2, flag13);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag13, flag13, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projMirProcChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMirProcChildArray = object.getJSONArray("values");
                if (projMirProcChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + proj_mir_proc_childDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMirProcChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMirProcChildArray.getJSONObject(i).getString("a") + "_" + projMirProcChildArray.getJSONObject(i).getString("a") + "_" + projMirProcChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMirProcChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMirProcChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMirProcChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMirProcChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMirProcChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMirProcChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMirProcChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(10, projMirProcChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(11, projMirProcChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(12, projMirProcChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(13, projMirProcChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(14, projMirProcChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(15, projMirProcChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(16, projMirProcChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(17, projMirProcChildArray.getJSONObject(i).getString("p"));
                        insertStatement.execute();
                        // Log.d("MR Child Master", "MR Child Master Dao Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg13 != null) {
                            if (msg13.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg13.setText("Database inserting...");
                                msg13.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress13.setProgress(99);
                            else if (pbValue == 0)
                                progress13.setProgress(1);
                            else
                                progress13.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MR Proc Child Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(proj_mir_proc_child_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMirProcChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "proj_mir_proc_child--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn13 != null)
                        onListLoad(req, updateOn13, progress13, msg13, "proj_mir_proc_child");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "proj_mir_proc_child");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(proj_mir_proc_child_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag13);
                insertStatement.bindString(2, flag13);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg13 != null) {
                    updateOn13.setText(updateDate);
                    progress13.setProgress(100);
                    msg13.setText("Update Success");
                    msg13.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class proj_mir_master extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag14, flag14, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag14);
            insertStatement.bindString(2, flag14);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //  updateOnTableDao.insertOrReplace(new UpdateOnTable(flag14, flag14, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projMirMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMirProcChildArray = object.getJSONArray("values");
                if (projMirProcChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + proj_mir_masterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMirProcChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMirProcChildArray.getJSONObject(i).getString("a") + "_" + projMirProcChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMirProcChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMirProcChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMirProcChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMirProcChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMirProcChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMirProcChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMirProcChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMirProcChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMirProcChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMirProcChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMirProcChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMirProcChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMirProcChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMirProcChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMirProcChildArray.getJSONObject(i).getString("o"));
                        insertStatement.execute();
                        // Log.d("MR Master", "MR MasterDao Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg14 != null) {
                            if (msg14.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg14.setText("Database inserting...");
                                msg14.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress14.setProgress(99);
                            else if (pbValue == 0)
                                progress14.setProgress(1);
                            else
                                progress14.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MR Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(proj_mir_master_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMirMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "proj_mir_master--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn14 != null)
                        onListLoad(req, updateOn14, progress14, msg14, "proj_mir_master");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "proj_mir_master");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(proj_mir_master_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag14);
                insertStatement.bindString(2, flag14);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg14 != null) {
                    updateOn14.setText(updateDate);
                    progress14.setProgress(100);
                    msg14.setText("Update Success");
                    msg14.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class proj_min_proc_child extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag15, flag15, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag15);
            insertStatement.bindString(2, flag15);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag15, flag15, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projMinProcChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMinProcChildArray = object.getJSONArray("values");
                if (projMinProcChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + proj_min_proc_childDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMinProcChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMinProcChildArray.getJSONObject(i).getString("a") + "_" + projMinProcChildArray.getJSONObject(i).getString("b") + "_" + projMinProcChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMinProcChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMinProcChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMinProcChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMinProcChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(7, projMinProcChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(8, projMinProcChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(9, projMinProcChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(10, projMinProcChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(11, projMinProcChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindDouble(12, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("k")));
                        insertStatement.bindDouble(13, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("l")));
                        insertStatement.bindDouble(14, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("m")));
                        insertStatement.bindDouble(15, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("n")));
                        insertStatement.bindDouble(16, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("o")));
                        insertStatement.bindDouble(17, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("p")));
                        insertStatement.bindDouble(18, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("q")));
                        insertStatement.bindDouble(19, Double.parseDouble(projMinProcChildArray.getJSONObject(i).getString("r")));
                        insertStatement.execute();
                        //  Log.d("MIN Child", "MIN Child MasterDao Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg15 != null) {
                            if (msg15.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg15.setText("Database inserting...");
                                msg15.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress15.setProgress(99);
                            else if (pbValue == 0)
                                progress15.setProgress(1);
                            else
                                progress15.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MIN Child Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(proj_min_proc_child_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMinProcChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "proj_min_proc_child--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn15 != null)
                        onListLoad(req, updateOn15, progress15, msg15, "proj_min_proc_child");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "proj_min_proc_child");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(proj_min_proc_child_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag15);
                insertStatement.bindString(2, flag15);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg15 != null) {
                    updateOn15.setText(updateDate);
                    progress15.setProgress(100);
                    msg15.setText("Update Success");
                    msg15.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class proj_min_master extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag16, flag16, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag16);
            insertStatement.bindString(2, flag16);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag16, flag16, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projMinMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMinMasterArray = object.getJSONArray("values");
                if (projMinMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + proj_min_masterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMinMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMinMasterArray.getJSONObject(i).getString("a") + "_" + projMinMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMinMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMinMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMinMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMinMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMinMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMinMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMinMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMinMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMinMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMinMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMinMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMinMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMinMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMinMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMinMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMinMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMinMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMinMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMinMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMinMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMinMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMinMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMinMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projMinMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.execute();
                        // Log.d("MIN", "MIN MasterDao Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg16 != null) {
                            if (msg16.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg16.setText("Database inserting...");
                                msg16.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress16.setProgress(99);
                            else if (pbValue == 0)
                                progress16.setProgress(1);
                            else
                                progress16.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MIN Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(proj_min_master_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                            + " values (?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    insertStatement.clearBindings();
                    insertStatement.bindString(1, flag16);
                    insertStatement.bindString(2, flag16);
                    insertStatement.bindString(3, uid);
                    insertStatement.bindString(4, matObject.getString("lastUpdateDate"));
                    insertStatement.bindString(5, "Updating");
                    insertStatement.execute();
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'" + matObject.getString("lastUpdateDate") + "','dataTable':'projMinMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "proj_min_master--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn16 != null)
                        onListLoad(req, updateOn16, progress16, msg16, "proj_min_master");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "proj_min_master");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(proj_min_master_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag16);
                insertStatement.bindString(2, flag16);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg16 != null) {
                    updateOn16.setText(updateDate);
                    progress16.setProgress(100);
                    msg16.setText("Update Success");
                    msg16.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class proj_mr_proc_child extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag17, flag17, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag17);
            insertStatement.bindString(2, flag17);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag17, flag17, uid, updateDate, "Updating"));
                JSONArray projMrProcChildArray = matObject.getJSONArray("projMrProcChild");
                if (projMrProcChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + proj_mr_proc_childDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrProcChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrProcChildArray.getJSONObject(i).getString("a") + "_" + projMrProcChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMrProcChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMrProcChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMrProcChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMrProcChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMrProcChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMrProcChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(9, projMrProcChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(10, projMrProcChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(11, projMrProcChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(12, projMrProcChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(13, projMrProcChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(14, projMrProcChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(15, projMrProcChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(16, projMrProcChildArray.getJSONObject(i).getString("o"));
                        insertStatement.execute();
                       /* Log.d("MPR Child", "MPR Child MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projMrProcChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg17 != null) {
                                    if (msg17.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg17.setText("Database inserting...");
                                        msg17.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress17.setProgress(99);
                                    else if (pbValue == 0)
                                        progress17.setProgress(1);
                                    else
                                        progress17.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MPR Proc Child Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag17);
            insertStatement.bindString(2, flag17);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg17 != null) {
                updateOn17.setText(updateDate);
                progress17.setProgress(100);
                msg17.setText("Update Success");
                msg17.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class mobileRightsKeyMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag18, flag18, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag18);
            insertStatement.bindString(2, flag18);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag18, flag18, uid, updateDate, "Updating"));
                JSONArray mobileRightsKeyMasterArray = matObject.getJSONArray("mobileRightsKeyMaster");
                if (mobileRightsKeyMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + mobileRightsKeyMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < mobileRightsKeyMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, mobileRightsKeyMasterArray.getJSONObject(i).getString("f") + "_" + mobileRightsKeyMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, mobileRightsKeyMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, mobileRightsKeyMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, mobileRightsKeyMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, mobileRightsKeyMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, mobileRightsKeyMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.execute();
                        /*Log.d("Mobile Rights Key", "Mobile Rights Key MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + mobileRightsKeyMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg18 != null) {
                                    if (msg18.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg18.setText("Database inserting...");
                                        msg18.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress18.setProgress(99);
                                    else if (pbValue == 0)
                                        progress18.setProgress(1);
                                    else
                                        progress18.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Mobile Rights Key Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag18);
            insertStatement.bindString(2, flag18);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg18 != null) {
                updateOn18.setText(updateDate);
                progress18.setProgress(100);
                msg18.setText("Update Success");
                msg18.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class admEmpMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag19, flag19, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag19);
            insertStatement.bindString(2, flag19);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag19, flag19, uid, updateDate, "Updating"));
                JSONArray admEmpMasterArray = matObject.getJSONArray("admEmpMaster");
                if (admEmpMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + admEmpMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < admEmpMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, admEmpMasterArray.getJSONObject(i).getString("a") + "_" + admEmpMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, admEmpMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, admEmpMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, admEmpMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, admEmpMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, admEmpMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, admEmpMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, admEmpMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, admEmpMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, admEmpMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, admEmpMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, admEmpMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, admEmpMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, admEmpMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, admEmpMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, admEmpMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, admEmpMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, admEmpMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, admEmpMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, admEmpMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, admEmpMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, admEmpMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, admEmpMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.execute();
                       /* Log.d("EMP Master", "EMP MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + admEmpMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg19 != null) {
                                    if (msg19.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg19.setText("Database inserting...");
                                        msg19.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress19.setProgress(99);
                                    else if (pbValue == 0)
                                        progress19.setProgress(1);
                                    else
                                        progress19.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "EMP Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag19);
            insertStatement.bindString(2, flag19);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg19 != null) {
                updateOn19.setText(updateDate);
                progress19.setProgress(100);
                msg19.setText("Update Success");
                msg19.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projUserMaterialList extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag20, flag20, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag20);
            insertStatement.bindString(2, flag20);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(uid + "_" + flag20, flag20, uid, updateDate, "Updating"));
                JSONArray projUserMaterialListArray = matObject.getJSONArray("projUserMaterialList");
                if (projUserMaterialListArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projUserMaterialListDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projUserMaterialListArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, uid + "_" + projUserMaterialListArray.getJSONObject(i).getString("b") + "_" + projUserMaterialListArray.getJSONObject(i).getString("c") + "_" + projUserMaterialListArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projUserMaterialListArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projUserMaterialListArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projUserMaterialListArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projUserMaterialListArray.getJSONObject(i).getString("d"));
                        insertStatement.execute();
                       /* Log.d("User Material", "User Material MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projUserMaterialListArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg20 != null) {
                                    if (msg20.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg20.setText("Database inserting...");
                                        msg20.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress20.setProgress(99);
                                    else if (pbValue == 0)
                                        progress20.setProgress(1);
                                    else
                                        progress20.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "User Material Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag20);
            insertStatement.bindString(2, flag20);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg20 != null) {
                updateOn20.setText(updateDate);
                progress20.setProgress(100);
                msg20.setText("Update Success");
                msg20.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projAlternateMaterialMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag21, flag21, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag21);
            insertStatement.bindString(2, flag21);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag21, flag21, uid, updateDate, "Updating"));
                JSONArray projAlternateMaterialMasterArray = matObject.getJSONArray("projAlternateMaterialMaster");
                if (projAlternateMaterialMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projAlternateMaterialMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projAlternateMaterialMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projAlternateMaterialMasterArray.getJSONObject(i).getString("a") + "_" + projAlternateMaterialMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projAlternateMaterialMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projAlternateMaterialMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projAlternateMaterialMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projAlternateMaterialMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projAlternateMaterialMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projAlternateMaterialMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projAlternateMaterialMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projAlternateMaterialMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projAlternateMaterialMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projAlternateMaterialMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projAlternateMaterialMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projAlternateMaterialMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.execute();
                       /* Log.d("Alternate Material", "Alternate Material MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projAlternateMaterialMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg21 != null) {
                                    if (msg21.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg21.setText("Database inserting...");
                                        msg21.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress21.setProgress(99);
                                    else if (pbValue == 0)
                                        progress21.setProgress(1);
                                    else
                                        progress21.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Alternate Material Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag21);
            insertStatement.bindString(2, flag21);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg21 != null) {
                updateOn21.setText(updateDate);
                progress21.setProgress(100);
                msg21.setText("Update Success");
                msg21.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class mobileRightsMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag22, flag22, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag22);
            insertStatement.bindString(2, flag22);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag22, flag22, uid, updateDate, "Updating"));
                JSONArray mobileRightsMasterArray = matObject.getJSONArray("mobileRightsMaster");
                if (mobileRightsMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + mobileRightsMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < mobileRightsMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, mobileRightsMasterArray.getJSONObject(i).getString("a") + "_" + mobileRightsMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, mobileRightsMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, mobileRightsMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, mobileRightsMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, mobileRightsMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, mobileRightsMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.execute();
                       /* Log.d("Mobile Rights", "Mobile Rights MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + mobileRightsMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg22 != null) {
                                    if (msg22.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg22.setText("Database inserting...");
                                        msg22.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress22.setProgress(99);
                                    else if (pbValue == 0)
                                        progress22.setProgress(1);
                                    else
                                        progress22.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Mobile Rights Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag22);
            insertStatement.bindString(2, flag22);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg22 != null) {
                updateOn22.setText(updateDate);
                progress22.setProgress(100);
                msg22.setText("Update Success");
                msg22.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMaterialChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag23, flag23, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag23);
            insertStatement.bindString(2, flag23);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag23, flag23, uid, updateDate, "Updating"));
                JSONArray projMaterialChildArray = matObject.getJSONArray("projMaterialChild");
                if (projMaterialChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMaterialChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMaterialChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMaterialChildArray.getJSONObject(i).getString("a") + "_" + projMaterialChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMaterialChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMaterialChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMaterialChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMaterialChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMaterialChildArray.getJSONObject(i).getString("e"));
                        insertStatement.execute();
                       /* Log.d("Material Child", "Material Child MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projMaterialChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg23 != null) {
                                    if (msg23.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg23.setText("Database inserting...");
                                        msg23.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress23.setProgress(99);
                                    else if (pbValue == 0)
                                        progress23.setProgress(1);
                                    else
                                        progress23.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Material Child Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag23);
            insertStatement.bindString(2, flag23);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg23 != null) {
                updateOn23.setText(updateDate);
                progress23.setProgress(100);
                msg23.setText("Update Success");
                msg23.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag24, flag24, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag24);
            insertStatement.bindString(2, flag24);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag24, flag24, uid, updateDate, "Updating"));
                JSONArray projPoMasterArray = matObject.getJSONArray("projPoMaster");
                if (projPoMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projPoMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoMasterArray.getJSONObject(i).getString("a") + "_" + projPoMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projPoMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projPoMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projPoMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projPoMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projPoMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projPoMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projPoMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projPoMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projPoMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projPoMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projPoMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projPoMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projPoMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projPoMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projPoMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projPoMasterArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projPoMasterArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projPoMasterArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projPoMasterArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projPoMasterArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projPoMasterArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projPoMasterArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, projPoMasterArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, projPoMasterArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, projPoMasterArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, projPoMasterArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(42, projPoMasterArray.getJSONObject(i).getString("an"));
                        insertStatement.bindString(43, projPoMasterArray.getJSONObject(i).getString("ao"));
                        insertStatement.bindString(44, projPoMasterArray.getJSONObject(i).getString("ap"));
                        insertStatement.bindString(45, projPoMasterArray.getJSONObject(i).getString("aq"));
                        insertStatement.bindString(46, projPoMasterArray.getJSONObject(i).getString("ar"));
                        insertStatement.bindString(47, projPoMasterArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(48, projPoMasterArray.getJSONObject(i).getString("at"));
                        insertStatement.bindString(49, projPoMasterArray.getJSONObject(i).getString("au"));
                        insertStatement.bindString(50, projPoMasterArray.getJSONObject(i).getString("av"));
                        insertStatement.bindString(51, projPoMasterArray.getJSONObject(i).getString("aw"));
                        insertStatement.bindString(52, projPoMasterArray.getJSONObject(i).getString("ax"));
                        insertStatement.bindString(53, projPoMasterArray.getJSONObject(i).getString("ay"));
                        insertStatement.bindString(54, projPoMasterArray.getJSONObject(i).getString("az"));
                        insertStatement.execute();
                       /* Log.d("PO", "PO MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projPoMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg24 != null) {
                                    if (msg24.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg24.setText("Database inserting...");
                                        msg24.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress24.setProgress(99);
                                    else if (pbValue == 0)
                                        progress24.setProgress(1);
                                    else
                                        progress24.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag24);
            insertStatement.bindString(2, flag24);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg24 != null) {
                updateOn24.setText(updateDate);
                progress24.setProgress(100);
                msg24.setText("Update Success");
                msg24.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoItemChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag25, flag25, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag25);
            insertStatement.bindString(2, flag25);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projPoItemChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projPoItemChildArray = object.getJSONArray("values");
                if (projPoItemChildArray.length() > 0) {
                    String deleteId = projPoItemChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoItemChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoItemChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoItemChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoItemChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoItemChildDao.Properties.Po_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoItemChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoItemChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoItemChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindString(10, projPoItemChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoItemChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoItemChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoItemChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindDouble(14, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("l")));
                        insertStatement.bindDouble(15, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("m")));
                        insertStatement.bindDouble(16, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("n")));
                        insertStatement.bindDouble(17, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("o")));
                        insertStatement.bindDouble(18, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("p")));
                        insertStatement.bindString(19, projPoItemChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindDouble(20, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("r")));
                        insertStatement.bindDouble(21, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("s")));
                        insertStatement.bindLong(22, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("t")));
                        insertStatement.bindDouble(23, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("u")));
                        insertStatement.bindLong(24, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("v")));
                        insertStatement.bindDouble(25, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("w")));
                        insertStatement.bindString(26, projPoItemChildArray.getJSONObject(i).getString("x"));
                        insertStatement.bindDouble(27, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("y")));
                        insertStatement.bindDouble(28, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("z")));
                        insertStatement.bindDouble(29, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("aa")));
                        insertStatement.bindString(30, projPoItemChildArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindDouble(31, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("ac")));
                        insertStatement.bindDouble(32, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("ad")));
                        insertStatement.bindString(33, projPoItemChildArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindDouble(34, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("af")));
                        insertStatement.bindDouble(35, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("ag")));
                        insertStatement.bindString(36, projPoItemChildArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projPoItemChildArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, projPoItemChildArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, projPoItemChildArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, projPoItemChildArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, projPoItemChildArray.getJSONObject(i).getString("am"));
                        insertStatement.bindLong(42, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("an")));
                        insertStatement.bindLong(43, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("ao")));
                        insertStatement.bindDouble(44, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("ap")));
                        insertStatement.bindDouble(45, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("aq")));
                        insertStatement.bindLong(46, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("ar")));
                        insertStatement.bindString(47, projPoItemChildArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(48, projPoItemChildArray.getJSONObject(i).getString("at"));
                        insertStatement.bindDouble(49, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("au")));
                        insertStatement.bindString(50, projPoItemChildArray.getJSONObject(i).getString("av"));
                        insertStatement.bindDouble(51, Double.parseDouble(projPoItemChildArray.getJSONObject(i).getString("aw")));
                        insertStatement.bindString(52, projPoItemChildArray.getJSONObject(i).getString("ax"));
                        insertStatement.bindLong(53, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("ay")));
                        insertStatement.bindLong(54, Integer.parseInt(projPoItemChildArray.getJSONObject(i).getString("az")));
                        insertStatement.execute();
                        //Log.d("PO Child", "PO Child MasterDao Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg25 != null) {
                            if (msg25.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg25.setText("Database inserting...");
                                msg25.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress25.setProgress(99);
                            else if (pbValue == 0)
                                progress25.setProgress(1);
                            else
                                progress25.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Child Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projPoItemChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projPoItemChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projPoItemChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn25 != null)
                        onListLoad(req, updateOn25, progress25, msg25, "projPoItemChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projPoItemChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projPoItemChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag25);
                insertStatement.bindString(2, flag25);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg25 != null) {
                    updateOn25.setText(updateDate);
                    progress25.setProgress(100);
                    msg25.setText("Update Success");
                    msg25.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projJobIowStageMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag26, flag26, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag26);
            insertStatement.bindString(2, flag26);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag26, flag26, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projJobIowStageMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projJobIowStageMaster = object.getJSONArray("values");
                if (projJobIowStageMaster.length() > 0) {
                    String insertSql = "Insert or Replace into " + projJobIowStage_masterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projJobIowStageMaster.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projJobIowStageMaster.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projJobIowStageMaster.getJSONObject(i).getString("b"));
                        insertStatement.bindString(4, projJobIowStageMaster.getJSONObject(i).getString("c"));
                        insertStatement.bindString(5, projJobIowStageMaster.getJSONObject(i).getString("d"));
                        insertStatement.bindString(6, projJobIowStageMaster.getJSONObject(i).getString("e"));
                        insertStatement.bindString(7, projJobIowStageMaster.getJSONObject(i).getString("f"));
                        insertStatement.bindLong(8, Integer.parseInt(projJobIowStageMaster.getJSONObject(i).getString("g")));
                        insertStatement.bindDouble(9, Double.parseDouble(projJobIowStageMaster.getJSONObject(i).getString("h")));
                        insertStatement.bindDouble(10, Double.parseDouble(projJobIowStageMaster.getJSONObject(i).getString("i")));
                        insertStatement.bindDouble(11, Double.parseDouble(projJobIowStageMaster.getJSONObject(i).getString("j")));
                        insertStatement.bindDouble(12, Double.parseDouble(projJobIowStageMaster.getJSONObject(i).getString("k")));
                        insertStatement.bindLong(13, Integer.parseInt(projJobIowStageMaster.getJSONObject(i).getString("l")));
                        insertStatement.bindString(14, projJobIowStageMaster.getJSONObject(i).getString("m"));
                        insertStatement.bindString(15, projJobIowStageMaster.getJSONObject(i).getString("n"));
                        // Log.d(TAG, "projJobIowStageMaster Inserted" + (i + 1));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg26 != null) {
                            if (msg26.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg26.setText("Database inserting...");
                                msg26.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress26.setProgress(99);
                            else if (pbValue == 0)
                                progress26.setProgress(1);
                            else
                                progress26.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "IOW Stage Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projJobIowStageMaster_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (Integer.parseInt(object.getString("page")) < Integer.parseInt(object.getString("pageCount"))) {
                    String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                            + " values (?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    insertStatement.clearBindings();
                    insertStatement.bindString(1, flag26);
                    insertStatement.bindString(2, flag26);
                    insertStatement.bindString(3, uid);
                    insertStatement.bindString(4, matObject.getString("lastUpdateDate"));
                    insertStatement.bindString(5, "Updating");
                    insertStatement.execute();
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'" + matObject.getString("lastUpdateDate") + "','dataTable':'projJobIowStageMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projJobIowStageMaster-->" + (page + 1) + " :" + ApiCalls.getURLfromJson(req, context));
                    if (updateOn26 != null)
                        onListLoad(req, updateOn26, progress26, msg26, "projJobIowStageMaster");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projJobIowStageMaster");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projJobIowStageMaster_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag26);
                insertStatement.bindString(2, flag26);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg26 != null) {
                    updateOn26.setText(updateDate);
                    progress26.setProgress(100);
                    msg26.setText("Update Success");
                    msg26.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projStageIowMaterialDet extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag27, flag27, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag27);
            insertStatement.bindString(2, flag27);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag27, flag27, uid, updateDate, "Updating"));
                JSONArray projStageIowMaterialArray = matObject.getJSONArray("projStageIowMaterialDet");
                if (projStageIowMaterialArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projStageIowMaterialDetDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projStageIowMaterialArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projStageIowMaterialArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projStageIowMaterialArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projStageIowMaterialArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projStageIowMaterialArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projStageIowMaterialArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projStageIowMaterialArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projStageIowMaterialArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projStageIowMaterialArray.getJSONObject(i).getString("g"));
                        insertStatement.bindLong(10, Integer.parseInt(projStageIowMaterialArray.getJSONObject(i).getString("h")));
                        insertStatement.bindLong(11, Integer.parseInt(projStageIowMaterialArray.getJSONObject(i).getString("i")));
                        insertStatement.bindDouble(12, Double.parseDouble(projStageIowMaterialArray.getJSONObject(i).getString("j")));
                        insertStatement.bindString(13, projStageIowMaterialArray.getJSONObject(i).getString("k"));
                        insertStatement.bindDouble(14, Double.parseDouble(projStageIowMaterialArray.getJSONObject(i).getString("l")));
                        insertStatement.execute();
                       /* Log.d("Stage IOW Material", "Stage IOW Material MasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projStageIowMaterialArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg27 != null) {
                                    if (msg27.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg27.setText("Database inserting...");
                                        msg27.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress27.setProgress(99);
                                    else if (pbValue == 0)
                                        progress27.setProgress(1);
                                    else
                                        progress27.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Stage IOW Material Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag27);
            insertStatement.bindString(2, flag27);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg27 != null) {
                updateOn27.setText(updateDate);
                progress27.setProgress(100);
                msg27.setText("Update Success");
                msg27.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMrMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag28, flag28, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag28);
            insertStatement.bindString(2, flag28);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag28, flag28, uid, updateDate, "Updating"));
                JSONArray projMrMasterArray = matObject.getJSONArray("projMrMaster");
                if (projMrMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMrMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMrMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMrMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMrMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMrMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMrMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMrMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMrMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMrMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMrMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMrMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMrMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMrMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMrMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMrMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMrMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMrMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMrMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMrMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.execute();
                       /* Log.d("MPR", "MRMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projMrMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg28 != null) {
                                    if (msg28.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg28.setText("Database inserting...");
                                        msg28.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress28.setProgress(99);
                                    else if (pbValue == 0)
                                        progress28.setProgress(1);
                                    else
                                        progress28.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MPR Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag28);
            insertStatement.bindString(2, flag28);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg28 != null) {
                updateOn28.setText(updateDate);
                progress28.setProgress(100);
                msg28.setText("Update Success");
                msg28.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projVendorMasterView extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag29, flag29, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag29);
            insertStatement.bindString(2, flag29);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag29, flag29, uid, updateDate, "Updating"));
                JSONArray projVendorMasterViewArray = matObject.getJSONArray("projVendorMasterView");
                if (projVendorMasterViewArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projVendorMasterViewDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projVendorMasterViewArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projVendorMasterViewArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projVendorMasterViewArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projVendorMasterViewArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projVendorMasterViewArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projVendorMasterViewArray.getJSONObject(i).getString("d"));
                        insertStatement.execute();
                       /* Log.d("Vendor View", "VendorViewMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projVendorMasterViewArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg29 != null) {
                                    if (msg29.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg29.setText("Database inserting...");
                                        msg29.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress29.setProgress(99);
                                    else if (pbValue == 0)
                                        progress29.setProgress(1);
                                    else
                                        progress29.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Vendor View Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag29);
            insertStatement.bindString(2, flag29);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg29 != null) {
                updateOn29.setText(updateDate);
                progress29.setProgress(100);
                msg29.setText("Update Success");
                msg29.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class admEmpMasterView extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag30, flag30, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag30);
            insertStatement.bindString(2, flag30);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag30, flag30, uid, updateDate, "Updating"));
                JSONArray admEmpMasterViewArray = matObject.getJSONArray("admEmpMasterView");
                if (admEmpMasterViewArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + admEmpMasterViewDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < admEmpMasterViewArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, admEmpMasterViewArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, admEmpMasterViewArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, admEmpMasterViewArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, admEmpMasterViewArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, admEmpMasterViewArray.getJSONObject(i).getString("d"));
                        insertStatement.execute();
                        /*Log.d("Vendor View", "VendorViewMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + admEmpMasterViewArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg30 != null) {
                                    if (msg30.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg30.setText("Database inserting...");
                                        msg30.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress30.setProgress(99);
                                    else if (pbValue == 0)
                                        progress30.setProgress(1);
                                    else
                                        progress30.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Vendor View Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag30);
            insertStatement.bindString(2, flag30);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg30 != null) {
                updateOn30.setText(updateDate);
                progress30.setProgress(100);
                msg30.setText("Update Success");
                msg30.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class arcApprovalConfig extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag31, flag31, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag31);
            insertStatement.bindString(2, flag31);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag31, flag31, uid, updateDate, "Updating"));
                JSONArray arcApprovalArray = matObject.getJSONArray("arcApprovalConfig");
                if (arcApprovalArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + arcApprovalConfigTableDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < arcApprovalArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, arcApprovalArray.getJSONObject(i).getString("a") + "-" + arcApprovalArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, arcApprovalArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, arcApprovalArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, arcApprovalArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, arcApprovalArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, arcApprovalArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, arcApprovalArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, arcApprovalArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, arcApprovalArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, arcApprovalArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, arcApprovalArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, arcApprovalArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, arcApprovalArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, arcApprovalArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, arcApprovalArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, arcApprovalArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, arcApprovalArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, arcApprovalArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, arcApprovalArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, arcApprovalArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, arcApprovalArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, arcApprovalArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, arcApprovalArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, arcApprovalArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, arcApprovalArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, arcApprovalArray.getJSONObject(i).getString("y"));
                        insertStatement.execute();
                       /* Log.d("arcApprovalConfig", "arcApprovalConfigDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + arcApprovalArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg31 != null) {
                                    if (msg31.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg31.setText("Database inserting...");
                                        msg31.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress31.setProgress(99);
                                    else if (pbValue == 0)
                                        progress31.setProgress(1);
                                    else
                                        progress31.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Arc Approval Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag31);
            insertStatement.bindString(2, flag31);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg31 != null) {
                updateOn31.setText(updateDate);
                progress31.setProgress(100);
                msg31.setText("Update Success");
                msg31.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projUserProjectList extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag32, flag32, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag32);
            insertStatement.bindString(2, flag32);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag32, flag32, uid, updateDate, "Updating"));
                JSONArray userPjtArray = matObject.getJSONArray("projUserProjectList");
                if (userPjtArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projUserProjectListDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < userPjtArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, userPjtArray.getJSONObject(i).getString("a") + "-" + userPjtArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, userPjtArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, userPjtArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, userPjtArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, userPjtArray.getJSONObject(i).getString("d"));
                        insertStatement.execute();
                       /* Log.d("projUserProjectList", "projUserProjectListDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + userPjtArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg32 != null) {
                                    if (msg32.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg32.setText("Database inserting...");
                                        msg32.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress32.setProgress(99);
                                    else if (pbValue == 0)
                                        progress32.setProgress(1);
                                    else
                                        progress32.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "User Project Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag32);
            insertStatement.bindString(2, flag32);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg32 != null) {
                updateOn32.setText(updateDate);
                progress32.setProgress(100);
                msg32.setText("Update Success");
                msg32.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projStoreStock extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag33, flag33, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag33);
            insertStatement.bindString(2, flag33);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag33, flag33, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projStoreStock");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projStoreStockArray = object.getJSONArray("values");
                if (projStoreStockArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projStoreStockDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projStoreStockArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projStoreStockArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projStoreStockArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projStoreStockArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projStoreStockArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projStoreStockArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projStoreStockArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projStoreStockArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projStoreStockArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projStoreStockArray.getJSONObject(i).getString("h"));
                        insertStatement.execute();
                        //  Log.d("projStoreStock", "projStoreStockDao Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg33 != null) {
                            if (msg33.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg33.setText("Database inserting...");
                                msg33.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress33.setProgress(99);
                            else if (pbValue == 0)
                                progress33.setProgress(1);
                            else
                                progress33.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Project Store Stock Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projStoreStock_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projStoreStock','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projStoreStock-->" + (page + 1) + " :" + ApiCalls.getURLfromJson(req, context));
                    if (updateOn33 != null)
                        onListLoad(req, updateOn33, progress33, msg33, "projStoreStock");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projStoreStock");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projStoreStock_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag33);
                insertStatement.bindString(2, flag33);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg33 != null) {
                    updateOn33.setText(updateDate);
                    progress33.setProgress(100);
                    msg33.setText("Update Success");
                    msg33.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projStoreMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag34, flag34, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag34);
            insertStatement.bindString(2, flag34);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag34, flag34, uid, updateDate, "Updating"));
                JSONArray projStoreMasterArray = matObject.getJSONArray("projStoreMaster");
                if (projStoreMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projStoreMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projStoreMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projStoreMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projStoreMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projStoreMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projStoreMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projStoreMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projStoreMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projStoreMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projStoreMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projStoreMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projStoreMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projStoreMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projStoreMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projStoreMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projStoreMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projStoreMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projStoreMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projStoreMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projStoreMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.execute();
                       /* Log.d("projStoreMaster", "projStoreMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projStoreMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg34 != null) {
                                    if (msg34.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg34.setText("Database inserting...");
                                        msg34.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress34.setProgress(99);
                                    else if (pbValue == 0)
                                        progress34.setProgress(1);
                                    else
                                        progress34.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Project Sore Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag34);
            insertStatement.bindString(2, flag34);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg34 != null) {
                updateOn34.setText(updateDate);
                progress34.setProgress(100);
                msg34.setText("Update Success");
                msg34.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projProjectAddressMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag35, flag35, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag35);
            insertStatement.bindString(2, flag35);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag35, flag35, uid, updateDate, "Updating"));
                JSONArray projProjectAddressMasterArray = matObject.getJSONArray("projProjectAddressMaster");
                if (projProjectAddressMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projProjectAddressMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projProjectAddressMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projProjectAddressMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projProjectAddressMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projProjectAddressMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projProjectAddressMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projProjectAddressMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projProjectAddressMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projProjectAddressMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projProjectAddressMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projProjectAddressMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projProjectAddressMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projProjectAddressMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projProjectAddressMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projProjectAddressMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projProjectAddressMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.execute();
                       /* Log.d("projStoreMaster", "projStoreMasterDao Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projProjectAddressMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg35 != null) {
                                    if (msg35.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg35.setText("Database inserting...");
                                        msg35.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress35.setProgress(99);
                                    else if (pbValue == 0)
                                        progress35.setProgress(1);
                                    else
                                        progress35.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Project Address Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag35);
            insertStatement.bindString(2, flag35);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg35 != null) {
                updateOn35.setText(updateDate);
                progress35.setProgress(100);
                msg35.setText("Update Success");
                msg35.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoOtherChargeChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag36, flag36, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag36);
            insertStatement.bindString(2, flag36);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoOtherChargeChildArray = matObject.getJSONArray("projPoOtherChargeChild");
                if (projPoOtherChargeChildArray.length() > 0) {
                    String deleteId = projPoOtherChargeChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoOtherChargeChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoOtherChargeChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoOtherChargeChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoOtherChargeChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoOtherChargeChildDao.Properties.Po_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoOtherChargeChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoOtherChargeChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoOtherChargeChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projPoOtherChargeChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projPoOtherChargeChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projPoOtherChargeChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoOtherChargeChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoOtherChargeChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoOtherChargeChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoOtherChargeChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoOtherChargeChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoOtherChargeChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoOtherChargeChildArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                       /* Log.d("projPoOtherChargeChild", "projPoOtherChargeChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projPoOtherChargeChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg36 != null) {
                                    if (msg36.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg36.setText("Database inserting...");
                                        msg36.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress36.setProgress(99);
                                    else if (pbValue == 0)
                                        progress36.setProgress(1);
                                    else
                                        progress36.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Other Charges Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag36);
            insertStatement.bindString(2, flag36);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg36 != null) {
                updateOn36.setText(updateDate);
                progress36.setProgress(100);
                msg36.setText("Update Success");
                msg36.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class cmnPartyAddressInfo extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag37, flag37, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag37);
            insertStatement.bindString(2, flag37);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag37, flag37, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("cmnPartyAddressInfo");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray cmnPartyAddressInfodArray = object.getJSONArray("values");
                if (cmnPartyAddressInfodArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + cmnPartyAddressInfoDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < cmnPartyAddressInfodArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, cmnPartyAddressInfodArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, cmnPartyAddressInfodArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, cmnPartyAddressInfodArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, cmnPartyAddressInfodArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, cmnPartyAddressInfodArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, cmnPartyAddressInfodArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, cmnPartyAddressInfodArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, cmnPartyAddressInfodArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, cmnPartyAddressInfodArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, cmnPartyAddressInfodArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, cmnPartyAddressInfodArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, cmnPartyAddressInfodArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, cmnPartyAddressInfodArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, cmnPartyAddressInfodArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, cmnPartyAddressInfodArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, cmnPartyAddressInfodArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, cmnPartyAddressInfodArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, cmnPartyAddressInfodArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, cmnPartyAddressInfodArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, cmnPartyAddressInfodArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, cmnPartyAddressInfodArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                        // Log.d("cmnPartyAddressInfo", "cmnPartyAddressInfo Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg37 != null) {
                            if (msg37.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg37.setText("Database inserting...");
                                msg37.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress37.setProgress(99);
                            else if (pbValue == 0)
                                progress37.setProgress(1);
                            else
                                progress37.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Common Party Address Info Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(cmnPartyAddressInfo_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'cmnPartyAddressInfo','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "cmnPartyAddressInfo-->" + (page + 1) + " :" + ApiCalls.getURLfromJson(req, context));
                    if (updateOn37 != null)
                        onListLoad(req, updateOn37, progress37, msg37, "cmnPartyAddressInfo");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "cmnPartyAddressInfo");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(cmnPartyAddressInfo_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag37);
                insertStatement.bindString(2, flag37);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg37 != null) {
                    updateOn37.setText(updateDate);
                    progress37.setProgress(100);
                    msg37.setText("Update Success");
                    msg37.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projPoGernalTermsChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag38, flag38, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag38);
            insertStatement.bindString(2, flag38);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoGernalTermsChildArray = matObject.getJSONArray("projPoGernalTermsChild");
                if (projPoGernalTermsChildArray.length() > 0) {
                    String deleteId = projPoGernalTermsChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoGernalTermsChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoGernalTermsChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoGernalTermsChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoGernalTermsChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoGernalTermsChildDao.Properties.Po_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoGernalTermsChildDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoGernalTermsChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoGernalTermsChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projPoGernalTermsChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projPoGernalTermsChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projPoGernalTermsChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoGernalTermsChildArray.getJSONObject(i).getString("d"));
                        insertStatement.execute();
                        /*Log.d("projPoGernalTermsChild", "projPoGernalTermsChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projPoGernalTermsChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg38 != null) {
                                    if (msg38.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg38.setText("Database inserting...");
                                        msg38.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress38.setProgress(99);
                                    else if (pbValue == 0)
                                        progress38.setProgress(1);
                                    else
                                        progress38.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO General Terms Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag38);
            insertStatement.bindString(2, flag38);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg38 != null) {
                updateOn38.setText(updateDate);
                progress38.setProgress(100);
                msg38.setText("Update Success");
                msg38.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoTermsChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag39, flag39, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag39);
            insertStatement.bindString(2, flag39);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoTermsChildArray = matObject.getJSONArray("projPoTermsChild");
                if (projPoTermsChildArray.length() > 0) {
                    String deleteId = projPoTermsChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoTermsChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoTermsChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoTermsChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoTermsChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoTermsChildDao.Properties.Po_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoTermsChildDao.getTablename()
                            + " values (?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoTermsChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoTermsChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projPoTermsChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projPoTermsChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projPoTermsChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoTermsChildArray.getJSONObject(i).getString("d"));
                        insertStatement.execute();
                       /* Log.d("projPoTermsChild", "projPoTermsChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projPoTermsChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg39 != null) {
                                    if (msg39.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg39.setText("Database inserting...");
                                        msg39.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress39.setProgress(99);
                                    else if (pbValue == 0)
                                        progress39.setProgress(1);
                                    else
                                        progress39.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Terms Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag39);
            insertStatement.bindString(2, flag39);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg39 != null) {
                updateOn39.setText(updateDate);
                progress39.setProgress(100);
                msg39.setText("Update Success");
                msg39.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class cmnTaxMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag40, flag40, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag40);
            insertStatement.bindString(2, flag40);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag40, flag40, uid, updateDate, "Updating"));
                JSONArray cmnTaxMasterArray = matObject.getJSONArray("cmnTaxMaster");
                if (cmnTaxMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + cmnTaxMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < cmnTaxMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, cmnTaxMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, cmnTaxMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, cmnTaxMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, cmnTaxMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, cmnTaxMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, cmnTaxMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, cmnTaxMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, cmnTaxMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, cmnTaxMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, cmnTaxMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, cmnTaxMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                        /*Log.d("cmnTaxMaster", "cmnTaxMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + cmnTaxMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg40 != null) {
                                    if (msg40.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg40.setText("Database inserting...");
                                        msg40.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress40.setProgress(99);
                                    else if (pbValue == 0)
                                        progress40.setProgress(1);
                                    else
                                        progress40.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Common Tax Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag40);
            insertStatement.bindString(2, flag40);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg40 != null) {
                updateOn40.setText(updateDate);
                progress40.setProgress(100);
                msg40.setText("Update Success");
                msg40.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class cmnPartyCompanyInfo extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag41, flag41, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag41);
            insertStatement.bindString(2, flag41);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag41, flag41, uid, updateDate, "Updating"));
                JSONArray cmnPartyCompanyInfoArray = matObject.getJSONArray("cmnPartyCompanyInfo");
                if (cmnPartyCompanyInfoArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + cmnPartyCompanyInfoDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < cmnPartyCompanyInfoArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, cmnPartyCompanyInfoArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, cmnPartyCompanyInfoArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, cmnPartyCompanyInfoArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, cmnPartyCompanyInfoArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, cmnPartyCompanyInfoArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, cmnPartyCompanyInfoArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, cmnPartyCompanyInfoArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, cmnPartyCompanyInfoArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, cmnPartyCompanyInfoArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, cmnPartyCompanyInfoArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, cmnPartyCompanyInfoArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, cmnPartyCompanyInfoArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, cmnPartyCompanyInfoArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, cmnPartyCompanyInfoArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, cmnPartyCompanyInfoArray.getJSONObject(i).getString("n"));
                        insertStatement.execute();
                       /* Log.d("cmnPartyCompanyInfo", "cmnPartyCompanyInfo Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + cmnPartyCompanyInfoArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg41 != null) {
                                    if (msg41.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg41.setText("Database inserting...");
                                        msg41.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress41.setProgress(99);
                                    else if (pbValue == 0)
                                        progress41.setProgress(1);
                                    else
                                        progress41.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Common Party Company Info Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag41);
            insertStatement.bindString(2, flag41);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg41 != null) {
                updateOn41.setText(updateDate);
                progress41.setProgress(100);
                msg41.setText("Update Success");
                msg41.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class cmnPartyIdDocInfo extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag42, flag42, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag42);
            insertStatement.bindString(2, flag42);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag42, flag42, uid, updateDate, "Updating"));
                JSONArray cmnPartyIdDocInfoArray = matObject.getJSONArray("cmnPartyIdDocInfo");
                if (cmnPartyIdDocInfoArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + cmnPartyIdDocInfoDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < cmnPartyIdDocInfoArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, cmnPartyIdDocInfoArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, cmnPartyIdDocInfoArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, cmnPartyIdDocInfoArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, cmnPartyIdDocInfoArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, cmnPartyIdDocInfoArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, cmnPartyIdDocInfoArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, cmnPartyIdDocInfoArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, cmnPartyIdDocInfoArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, cmnPartyIdDocInfoArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, cmnPartyIdDocInfoArray.getJSONObject(i).getString("i"));
                        insertStatement.execute();
                        /*Log.d("cmnPartyIdDocInfo", "cmnPartyIdDocInfo Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + cmnPartyIdDocInfoArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg42 != null) {
                                    if (msg42.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg42.setText("Database inserting...");
                                        msg42.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress42.setProgress(99);
                                    else if (pbValue == 0)
                                        progress42.setProgress(1);
                                    else
                                        progress42.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Common PartyId Doc Info Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag42);
            insertStatement.bindString(2, flag42);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg42 != null) {
                updateOn42.setText(updateDate);
                progress42.setProgress(100);
                msg42.setText("Update Success");
                msg42.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMbookMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag43, flag43, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag43);
            insertStatement.bindString(2, flag43);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projMbookMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMbookMasterArray = object.getJSONArray("values");
                if (projMbookMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMbookMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMbookMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMbookMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMbookMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMbookMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMbookMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMbookMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMbookMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMbookMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMbookMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMbookMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMbookMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMbookMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMbookMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMbookMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMbookMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMbookMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMbookMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMbookMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMbookMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMbookMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg43 != null) {
                            if (msg43.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg43.setText("Database inserting...");
                                msg43.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress43.setProgress(99);
                            else if (pbValue == 0)
                                progress43.setProgress(1);
                            else
                                progress43.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MBook Master Details Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projMbookMaster_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMbookMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMbookMaster--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn43 != null)
                        onListLoad(req, updateOn43, progress43, msg43, "projMbookMaster");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMbookMaster");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMbookMaster_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag43);
                insertStatement.bindString(2, flag43);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg43 != null) {
                    updateOn43.setText(updateDate);
                    progress43.setProgress(100);
                    msg43.setText("Update Success");
                    msg43.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projContractorMasterView extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag44, flag44, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag44);
            insertStatement.bindString(2, flag44);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag44, flag44, uid, updateDate, "Updating"));
                JSONArray projContractorMasterViewArray = matObject.getJSONArray("projContractorMasterView");
                if (projContractorMasterViewArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projContractorMasterViewDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projContractorMasterViewArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projContractorMasterViewArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projContractorMasterViewArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projContractorMasterViewArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projContractorMasterViewArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projContractorMasterViewArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projContractorMasterViewArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projContractorMasterViewArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projContractorMasterViewArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projContractorMasterViewArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projContractorMasterViewArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projContractorMasterViewArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projContractorMasterViewArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projContractorMasterViewArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projContractorMasterViewArray.getJSONObject(i).getString("m"));
                        // insertStatement.bindString(13, "");
                        insertStatement.execute();
                        /*Log.d("projContractorView", "projContractorView Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projContractorMasterViewArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg44 != null) {
                                    if (msg44.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg44.setText("Database inserting...");
                                        msg44.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress44.setProgress(99);
                                    else if (pbValue == 0)
                                        progress44.setProgress(1);
                                    else
                                        progress44.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Contractor Master View Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag44);
            insertStatement.bindString(2, flag44);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg44 != null) {
                updateOn44.setText(updateDate);
                progress44.setProgress(100);
                msg44.setText("Update Success");
                msg44.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projProjectMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag45, flag45, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag45);
            insertStatement.bindString(2, flag45);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag45, flag45, uid, updateDate, "Updating"));
                JSONArray projProjectMasterArray = matObject.getJSONArray("projProjectMaster");
                if (projProjectMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projProjectMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projProjectMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projProjectMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projProjectMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projProjectMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projProjectMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projProjectMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projProjectMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projProjectMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projProjectMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projProjectMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projProjectMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projProjectMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projProjectMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projProjectMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projProjectMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projProjectMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projProjectMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projProjectMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projProjectMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projProjectMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.execute();
                       /* Log.d("projProjectMaster", "projProjectMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projProjectMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg45 != null) {
                                    if (msg45.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg45.setText("Database inserting...");
                                        msg45.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress45.setProgress(99);
                                    else if (pbValue == 0)
                                        progress45.setProgress(1);
                                    else
                                        progress45.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Project Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag45);
            insertStatement.bindString(2, flag45);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg45 != null) {
                updateOn45.setText(updateDate);
                progress45.setProgress(100);
                msg45.setText("Update Success");
                msg45.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMbookSubActivityChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag46, flag46, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag46);
            insertStatement.bindString(2, flag46);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projMbookSubActivityChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMbookSubActivityChildArray = object.getJSONArray("values");
                if (projMbookSubActivityChildArray.length() > 0) {
                    String deleteId = projMbookSubActivityChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMbookSubActivityChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMbookSubActivityChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMbookSubActivityChild> tableDeleteQuery = daoSession.queryBuilder(ProjMbookSubActivityChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMbookSubActivityChildDao.Properties.Mbook_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMbookSubActivityChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookSubActivityChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookSubActivityChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMbookSubActivityChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMbookSubActivityChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMbookSubActivityChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookSubActivityChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMbookSubActivityChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMbookSubActivityChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookSubActivityChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMbookSubActivityChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMbookSubActivityChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMbookSubActivityChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMbookSubActivityChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMbookSubActivityChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMbookSubActivityChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMbookSubActivityChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMbookSubActivityChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMbookSubActivityChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMbookSubActivityChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMbookSubActivityChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMbookSubActivityChildArray.getJSONObject(i).getString("s"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg46 != null) {
                            if (msg46.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg46.setText("Database inserting...");
                                msg46.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress46.setProgress(99);
                            else if (pbValue == 0)
                                progress46.setProgress(1);
                            else
                                progress46.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Mbook SubActivity Child Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projMbookSubActivityChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMbookSubActivityChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMbookSubActivityChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn46 != null)
                        onListLoad(req, updateOn46, progress46, msg46, "projMbookSubActivityChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMbookSubActivityChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMbookSubActivityChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag46);
                insertStatement.bindString(2, flag46);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg46 != null) {
                    updateOn46.setText(updateDate);
                    progress46.setProgress(100);
                    msg46.setText("Update Success");
                    msg46.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projMbookIowNmrChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag47, flag47, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag47);
            insertStatement.bindString(2, flag47);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projMbookIowNmrChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMbookIowNmrChildArray = object.getJSONArray("values");
                if (projMbookIowNmrChildArray.length() > 0) {
                    String deleteId = projMbookIowNmrChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMbookIowNmrChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMbookIowNmrChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMbookIowNmrChild> tableDeleteQuery = daoSession.queryBuilder(ProjMbookIowNmrChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMbookIowNmrChildDao.Properties.Mbook_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMbookIowNmrChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookIowNmrChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookIowNmrChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMbookIowNmrChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMbookIowNmrChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMbookIowNmrChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookIowNmrChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMbookIowNmrChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMbookIowNmrChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookIowNmrChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMbookIowNmrChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMbookIowNmrChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMbookIowNmrChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMbookIowNmrChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMbookIowNmrChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMbookIowNmrChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMbookIowNmrChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMbookIowNmrChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMbookIowNmrChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMbookIowNmrChildArray.getJSONObject(i).getString("q"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg47 != null) {
                            if (msg47.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg47.setText("Database inserting...");
                                msg47.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress47.setProgress(99);
                            else if (pbValue == 0)
                                progress47.setProgress(1);
                            else
                                progress47.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Mbook IOW NMR Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projMbookIowNmrChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMbookIowNmrChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMbookIowNmrChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn47 != null)
                        onListLoad(req, updateOn47, progress47, msg47, "projMbookIowNmrChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMbookIowNmrChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMbookIowNmrChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag47);
                insertStatement.bindString(2, flag47);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg47 != null) {
                    updateOn47.setText(updateDate);
                    progress47.setProgress(100);
                    msg47.setText("Update Success");
                    msg47.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projMbookiowChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag48, flag48, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag48);
            insertStatement.bindString(2, flag48);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projMbookIowChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMbookiowChildArray = object.getJSONArray("values");
                if (projMbookiowChildArray.length() > 0) {
                    String deleteId = projMbookiowChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMbookiowChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMbookiowChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMbookiowChild> tableDeleteQuery = daoSession.queryBuilder(ProjMbookiowChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMbookiowChildDao.Properties.Mbook_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMbookiowChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookiowChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookiowChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMbookiowChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMbookiowChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMbookiowChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookiowChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMbookiowChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMbookiowChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookiowChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMbookiowChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMbookiowChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMbookiowChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMbookiowChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMbookiowChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMbookiowChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMbookiowChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMbookiowChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMbookiowChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMbookiowChildArray.getJSONObject(i).getString("q"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                                         @Override
                                         public void run() {
                                             // TODO Auto-generated method stub
                                             if (msg48 != null) {
                                                 if (msg48.getText().toString().equalsIgnoreCase("InProgress...")) {
                                                     msg48.setText("Database inserting...");
                                                     msg48.setTextColor(getResources().getColor(R.color.black));
                                                 }
                                                 if (pbValue == 100)
                                                     progress48.setProgress(99);
                                                 else if (pbValue == 0)
                                                     progress48.setProgress(1);
                                                 else
                                                     progress48.setProgress(pbValue);
                                                 Intent intent = new Intent();
                                                 Notification notification;
                                                 final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                         getApplicationContext(), 0, intent, 0);
                                                 notification = new Notification(R.drawable.eapicon,
                                                         "Uploading file", System.currentTimeMillis());
                                                 notification.flags = notification.flags
                                                         | Notification.FLAG_ONGOING_EVENT;
                                                 notification.contentView = new RemoteViews(getApplicationContext()
                                                         .getPackageName(), R.layout.notification_syn);
                                                 notification.contentIntent = pendingIntent;
                                                 notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                                 notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                         "Updating Database...");
                                                 notificationManager = (NotificationManager) getApplicationContext()
                                                         .getSystemService(Context.NOTIFICATION_SERVICE);
                                                 notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Mbook IOW Child Updating...");
                                                 notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                                 notificationManager.notify(projMbookIowChild_id, notification);
                                             }
                                         }
                                     }
                );
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMbookIowChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMbookIowChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn48 != null)
                        onListLoad(req, updateOn48, progress48, msg48, "projMbookiowChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMbookiowChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMbookIowChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag48);
                insertStatement.bindString(2, flag48);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg48 != null) {
                    updateOn48.setText(updateDate);
                    progress48.setProgress(100);
                    msg48.setText("Update Success");
                    msg48.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projStageChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag49, flag49, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag49);
            insertStatement.bindString(2, flag49);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag49, flag49, uid, updateDate, "Updating"));
                JSONArray projStageChildArray = matObject.getJSONArray("projStageChild");
                if (projStageChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projStageChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projStageChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projStageChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projStageChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projStageChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projStageChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projStageChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projStageChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projStageChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projStageChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projStageChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projStageChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projStageChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projStageChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projStageChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projStageChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projStageChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projStageChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projStageChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projStageChildArray.getJSONObject(i).getString("q"));
                        insertStatement.execute();
                        /*Log.d("projStageChild", "projStageChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projStageChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg49 != null) {
                                    if (msg49.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg49.setText("Database inserting...");
                                        msg49.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress49.setProgress(99);
                                    else if (pbValue == 0)
                                        progress49.setProgress(1);
                                    else
                                        progress49.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Stage Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag49);
            insertStatement.bindString(2, flag49);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg49 != null) {
                updateOn49.setText(updateDate);
                progress49.setProgress(100);
                msg49.setText("Update Success");
                msg49.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projLabourMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag50, flag50, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag50);
            insertStatement.bindString(2, flag50);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag50, flag50, uid, updateDate, "Updating"));
                JSONArray projLabourMasterArray = matObject.getJSONArray("projLabourMaster");
                if (projLabourMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projLabourMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projLabourMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projLabourMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projLabourMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projLabourMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projLabourMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projLabourMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projLabourMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projLabourMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projLabourMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projLabourMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projLabourMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projLabourMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projLabourMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projLabourMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projLabourMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projLabourMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projLabourMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projLabourMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projLabourMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projLabourMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projLabourMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projLabourMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                       /* Log.d("projLabourMaster", "projLabourMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projLabourMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg50 != null) {
                                    if (msg50.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg50.setText("Database inserting...");
                                        msg50.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress50.setProgress(99);
                                    else if (pbValue == 0)
                                        progress50.setProgress(1);
                                    else
                                        progress50.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Labour Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag50);
            insertStatement.bindString(2, flag50);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg50 != null) {
                updateOn50.setText(updateDate);
                progress50.setProgress(100);
                msg50.setText("Update Success");
                msg50.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projFormulaMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag51, flag51, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag51);
            insertStatement.bindString(2, flag51);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag51, flag51, uid, updateDate, "Updating"));
                JSONArray projFormulaMasterArray = matObject.getJSONArray("projFormulaMaster");
                if (projFormulaMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projFormulaMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projFormulaMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projFormulaMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projFormulaMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projFormulaMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projFormulaMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projFormulaMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projFormulaMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projFormulaMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projFormulaMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.execute();
                        /*Log.d("projFormulaMaster", "projFormulaMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projFormulaMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg51 != null) {
                                    if (msg51.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg51.setText("Database inserting...");
                                        msg51.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress51.setProgress(99);
                                    else if (pbValue == 0)
                                        progress51.setProgress(1);
                                    else
                                        progress51.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Formula Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag51);
            insertStatement.bindString(2, flag51);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg51 != null) {
                updateOn51.setText(updateDate);
                progress51.setProgress(100);
                msg51.setText("Update Success");
                msg51.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMbookIowGridChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag52, flag52, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag52);
            insertStatement.bindString(2, flag52);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag52, flag52, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projMbookIowGridChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMbookIowGridChildArray = object.getJSONArray("values");
                if (projMbookIowGridChildArray.length() > 0) {
                    String deleteId = projMbookIowGridChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMbookIowGridChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMbookIowGridChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMbookIowGridChild> tableDeleteQuery = daoSession.queryBuilder(ProjMbookIowGridChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMbookIowGridChildDao.Properties.Mbook_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMbookIowGridChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookIowGridChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookIowGridChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMbookIowGridChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMbookIowGridChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMbookIowGridChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookIowGridChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMbookIowGridChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMbookIowGridChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookIowGridChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMbookIowGridChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMbookIowGridChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMbookIowGridChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMbookIowGridChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMbookIowGridChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMbookIowGridChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMbookIowGridChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMbookIowGridChildArray.getJSONObject(i).getString("o"));
                        insertStatement.execute();
                        // Log.d("projMbookIowGridChild", "projMbookIowGridChild Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg52 != null) {
                            if (msg52.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg52.setText("Database inserting...");
                                msg52.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress52.setProgress(99);
                            else if (pbValue == 0)
                                progress52.setProgress(1);
                            else
                                progress52.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Mbook IOW Grid Child Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projMbookIowGridChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                            + " values (?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    insertStatement.clearBindings();
                    insertStatement.bindString(1, flag52);
                    insertStatement.bindString(2, flag52);
                    insertStatement.bindString(3, uid);
                    insertStatement.bindString(4, matObject.getString("lastUpdateDate"));
                    insertStatement.bindString(5, "Updating");
                    insertStatement.execute();
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'" + matObject.getString("lastUpdateDate") + "','dataTable':'projMbookIowGridChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMbookIowGridChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn52 != null)
                        onListLoad(req, updateOn52, progress52, msg52, "projMbookIowGridChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMbookIowGridChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMbookIowGridChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag52);
                insertStatement.bindString(2, flag52);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg52 != null) {
                    updateOn52.setText(updateDate);
                    progress52.setProgress(100);
                    msg52.setText("Update Success");
                    msg52.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projJobStageGridIow extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag53, flag53, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag53);
            insertStatement.bindString(2, flag53);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag53, flag53, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projJobStageGridIow");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projJobStageGridIowArray = object.getJSONArray("values");
                if (projJobStageGridIowArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projJobStageGridIowDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projJobStageGridIowArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projJobStageGridIowArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projJobStageGridIowArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projJobStageGridIowArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projJobStageGridIowArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projJobStageGridIowArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projJobStageGridIowArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projJobStageGridIowArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projJobStageGridIowArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projJobStageGridIowArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projJobStageGridIowArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projJobStageGridIowArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projJobStageGridIowArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projJobStageGridIowArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projJobStageGridIowArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projJobStageGridIowArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projJobStageGridIowArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projJobStageGridIowArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projJobStageGridIowArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projJobStageGridIowArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projJobStageGridIowArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projJobStageGridIowArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                        // Log.d("projJobStageGridIow", "projJobStageGridIow Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg53 != null) {
                            if (msg53.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg53.setText("Database inserting...");
                                msg53.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress53.setProgress(99);
                            else if (pbValue == 0)
                                progress53.setProgress(1);
                            else
                                progress53.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Job Stage Grid IOW Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projJobStageGridIow_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projJobStageGridIow','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projJobStageGridIow--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn53 != null)
                        onListLoad(req, updateOn53, progress53, msg53, "projJobStageGridIow");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projJobStageGridIow");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projJobStageGridIow_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag53);
                insertStatement.bindString(2, flag53);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg53 != null) {
                    updateOn53.setText(updateDate);
                    progress53.setProgress(100);
                    msg53.setText("Update Success");
                    msg53.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projJobStageGridMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag54, flag54, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag54);
            insertStatement.bindString(2, flag54);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag54, flag54, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projJobStageGridMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projJobStageGridMasterArray = object.getJSONArray("values");
                if (projJobStageGridMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projJobStageGridMasterDao.getTablename()
                            + " values (?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projJobStageGridMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, "" + i);
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projJobStageGridMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projJobStageGridMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.execute();
                        // Log.d("projJobStageGridMaster", "projJobStageGridMaster Inserted " + (i + 1));
                      /* Float divValue = ((Float.parseFloat("" + (i + 1 + ((page - 1) * 20000))) / Float.parseFloat("" + totalRecord)) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg54 != null) {
                                    if (msg54.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg54.setText("Database inserting...");
                                        msg54.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress54.setProgress(99);
                                    else if (pbValue == 0)
                                        progress54.setProgress(1);
                                    else
                                        progress54.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Job Stage Grid Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(projJobStageGridMaster_id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg54 != null) {
                            if (msg54.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg54.setText("Database inserting...");
                                msg54.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress54.setProgress(99);
                            else if (pbValue == 0)
                                progress54.setProgress(1);
                            else
                                progress54.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Job Stage Grid Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projJobStageGridMaster_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projJobStageGridMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projJobStageGridMaster--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn54 != null)
                        onListLoad(req, updateOn54, progress54, msg54, "projJobStageGridMaster");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projJobStageGridMaster");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projJobStageGridMaster_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag54);
                insertStatement.bindString(2, flag54);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg54 != null) {
                    updateOn54.setText(updateDate);
                    progress54.setProgress(100);
                    msg54.setText("Update Success");
                    msg54.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projIowMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag55, flag55, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag55);
            insertStatement.bindString(2, flag55);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag55, flag55, uid, updateDate, "Updating"));
                JSONArray projIowMasterArray = matObject.getJSONArray("projIowMaster");
                if (projIowMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projIowMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projIowMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projIowMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projIowMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projIowMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projIowMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projIowMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projIowMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projIowMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projIowMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projIowMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projIowMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projIowMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projIowMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projIowMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projIowMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projIowMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projIowMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projIowMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projIowMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projIowMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projIowMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projIowMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projIowMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projIowMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projIowMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projIowMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projIowMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.execute();
                       /* Log.d("projIowMaster", "projIowMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projIowMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg55 != null) {
                                    if (msg55.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg55.setText("Database inserting...");
                                        msg55.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress55.setProgress(99);
                                    else if (pbValue == 0)
                                        progress55.setProgress(1);
                                    else
                                        progress55.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "IOW Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag55);
            insertStatement.bindString(2, flag55);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg55 != null) {
                updateOn55.setText(updateDate);
                progress55.setProgress(100);
                msg55.setText("Update Success");
                msg55.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projIowMaterialChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag56, flag56, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag56);
            insertStatement.bindString(2, flag56);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag56, flag56, uid, updateDate, "Updating"));
                JSONArray projIowMaterialChildArray = matObject.getJSONArray("projIowMaterialChild");
                if (projIowMaterialChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projIowMaterialChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projIowMaterialChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projIowMaterialChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projIowMaterialChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projIowMaterialChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projIowMaterialChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projIowMaterialChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projIowMaterialChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projIowMaterialChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindDouble(9, Double.parseDouble(projIowMaterialChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindDouble(10, Double.parseDouble(projIowMaterialChildArray.getJSONObject(i).getString("h")));
                        insertStatement.bindDouble(11, Double.parseDouble(projIowMaterialChildArray.getJSONObject(i).getString("i")));
                        insertStatement.bindString(12, projIowMaterialChildArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                        /*Log.d("projIowMaterialChild", "projIowMaterialChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projIowMaterialChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg56 != null) {
                                    if (msg56.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg56.setText("Database inserting...");
                                        msg56.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress56.setProgress(99);
                                    else if (pbValue == 0)
                                        progress56.setProgress(1);
                                    else
                                        progress56.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "IOW Material Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag56);
            insertStatement.bindString(2, flag56);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg56 != null) {
                updateOn56.setText(updateDate);
                progress56.setProgress(100);
                msg56.setText("Update Success");
                msg56.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projJobMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag57, flag57, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag57);
            insertStatement.bindString(2, flag57);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag57, flag57, uid, updateDate, "Updating"));
                JSONArray projJobMasterArray = matObject.getJSONArray("projJobMaster");
                if (projJobMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projJobMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projJobMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projJobMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projJobMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projJobMasterArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projJobMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projJobMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projJobMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindLong(8, Integer.parseInt(projJobMasterArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projJobMasterArray.getJSONObject(i).getString("g")));
                        insertStatement.bindLong(10, Integer.parseInt(projJobMasterArray.getJSONObject(i).getString("h")));
                        insertStatement.bindString(11, projJobMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.execute();
                        /*Log.d("projJobMaster", "projJobMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projJobMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg57 != null) {
                                    if (msg57.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg57.setText("Database inserting...");
                                        msg57.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress57.setProgress(99);
                                    else if (pbValue == 0)
                                        progress57.setProgress(1);
                                    else
                                        progress57.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "IOW Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag57);
            insertStatement.bindString(2, flag57);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg57 != null) {
                updateOn57.setText(updateDate);
                progress57.setProgress(100);
                msg57.setText("Update Success");
                msg57.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projJobIowMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag58, flag58, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag58);
            insertStatement.bindString(2, flag58);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag58, flag58, uid, updateDate, "Updating"));
                JSONArray projJobIowMasterArray = matObject.getJSONArray("projJobIowMaster");
                if (projJobIowMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projJobIowMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projJobIowMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projJobIowMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("g")));
                        insertStatement.bindDouble(10, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("h")));
                        insertStatement.bindDouble(11, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("i")));
                        insertStatement.bindDouble(12, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("j")));
                        insertStatement.bindLong(13, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("k")));
                        insertStatement.bindLong(14, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("l")));
                        insertStatement.bindLong(15, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("m")));
                        insertStatement.bindDouble(16, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("n")));
                        insertStatement.bindDouble(17, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("o")));
                        insertStatement.bindDouble(18, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("p")));
                        insertStatement.bindDouble(19, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("q")));
                        insertStatement.bindDouble(20, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("r")));
                        insertStatement.bindDouble(21, Double.parseDouble(projJobIowMasterArray.getJSONObject(i).getString("s")));
                        insertStatement.bindLong(22, Integer.parseInt(projJobIowMasterArray.getJSONObject(i).getString("t")));
                        insertStatement.bindString(23, projJobIowMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.execute();
                       /* Log.d("projJobIowMaster", "projJobIowMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projJobIowMasterArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg58 != null) {
                                    if (msg58.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg58.setText("Database inserting...");
                                        msg58.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress58.setProgress(99);
                                    else if (pbValue == 0)
                                        progress58.setProgress(1);
                                    else
                                        progress58.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Job IOW Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag58);
            insertStatement.bindString(2, flag58);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg58 != null) {
                updateOn58.setText(updateDate);
                progress58.setProgress(100);
                msg58.setText("Update Success");
                msg58.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projUserStageList extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag59, flag59, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, uid + "_" + flag59);
            insertStatement.bindString(2, flag59);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag59, flag59, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projUserStageList");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projUserStageListArray = object.getJSONArray("values");
                if (projUserStageListArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projUserStageListDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projUserStageListArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projUserStageListArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projUserStageListArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projUserStageListArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projUserStageListArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projUserStageListArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projUserStageListArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projUserStageListArray.getJSONObject(i).getString("f"));
                        insertStatement.execute();
                        // Log.d("projUserStageList", "projUserStageList Inserted " + (i + 1));
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg59 != null) {
                            if (msg59.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg59.setText("Database inserting...");
                                msg59.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress59.setProgress(99);
                            else if (pbValue == 0)
                                progress59.setProgress(1);
                            else
                                progress59.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "User Stage List Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projUserStageList_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projUserStageList','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projUserStageList--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn59 != null)
                        onListLoad(req, updateOn59, progress59, msg59, "projUserStageList");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projUserStageList");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projUserStageList_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, uid + "_" + flag59);
                insertStatement.bindString(2, flag59);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg59 != null) {
                    updateOn59.setText(updateDate);
                    progress59.setProgress(100);
                    msg59.setText("Update Success");
                    msg59.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projMrChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag60, flag60, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag60);
            insertStatement.bindString(2, flag60);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMrChildArray = matObject.getJSONArray("projMrChild");
                if (projMrChildArray.length() > 0) {
                    String deleteId = projMrChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMrChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMrChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMrChild> tableDeleteQuery = daoSession.queryBuilder(ProjMrChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMrChildDao.Properties.Mr_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMrChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindString(10, projMrChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindLong(11, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("i")));
                        insertStatement.bindDouble(12, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("j")));
                        insertStatement.bindDouble(13, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("k")));
                        insertStatement.bindDouble(14, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("l")));
                        insertStatement.bindDouble(15, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("m")));
                        insertStatement.bindDouble(16, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("n")));
                        insertStatement.bindDouble(17, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("o")));
                        insertStatement.bindString(18, projMrChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMrChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMrChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindDouble(21, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("s")));
                        insertStatement.bindString(22, projMrChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindLong(23, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("u")));
                        insertStatement.bindDouble(24, Double.parseDouble(projMrChildArray.getJSONObject(i).getString("v")));
                        insertStatement.bindLong(25, Integer.parseInt(projMrChildArray.getJSONObject(i).getString("w")));
                        insertStatement.execute();
                      /*  Log.d("projMrChild", "projMrChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projMrChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg60 != null) {
                                    if (msg60.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg60.setText("Database inserting...");
                                        msg60.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress60.setProgress(99);
                                    else if (pbValue == 0)
                                        progress60.setProgress(1);
                                    else
                                        progress60.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MPR Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag60);
            insertStatement.bindString(2, flag60);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg60 != null) {
                updateOn60.setText(updateDate);
                progress60.setProgress(100);
                msg60.setText("Update Success");
                msg60.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMrItemScheduleChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag61, flag61, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag61);
            insertStatement.bindString(2, flag61);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag61, flag61, uid, updateDate, "Updating"));
                JSONArray projMrItemScheduleChildArray = matObject.getJSONArray("projMrItemScheduleChild");
                if (projMrItemScheduleChildArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMrItemScheduleChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrItemScheduleChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrItemScheduleChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMrItemScheduleChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMrItemScheduleChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMrItemScheduleChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMrItemScheduleChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindString(7, projMrItemScheduleChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindDouble(8, Double.parseDouble(projMrItemScheduleChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindString(9, projMrItemScheduleChildArray.getJSONObject(i).getString("g"));
                        insertStatement.execute();
                       /* Log.d("projMrItemScheduleChild", "projMrItemScheduleChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + projMrItemScheduleChildArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg61 != null) {
                                    if (msg61.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg61.setText("Database inserting...");
                                        msg61.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress61.setProgress(99);
                                    else if (pbValue == 0)
                                        progress61.setProgress(1);
                                    else
                                        progress61.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MPR Item Schedule Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag61);
            insertStatement.bindString(2, flag61);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg61 != null) {
                updateOn61.setText(updateDate);
                progress61.setProgress(100);
                msg61.setText("Update Success");
                msg61.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMirChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag62, flag62, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag62);
            insertStatement.bindString(2, flag62);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag25, flag25, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projMirChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMirChildArray = object.getJSONArray("values");
                if (projMirChildArray.length() > 0) {
                    String deleteId = projMirChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMirChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMirChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMirChild> tableDeleteQuery = daoSession.queryBuilder(ProjMirChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMirChildDao.Properties.Mir_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMirChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMirChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMirChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, projMirChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, projMirChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMirChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMirChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMirChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMirChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMirChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMirChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMirChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMirChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindDouble(13, Double.parseDouble(projMirChildArray.getJSONObject(i).getString("k")));
                        insertStatement.bindDouble(14, Double.parseDouble(projMirChildArray.getJSONObject(i).getString("l")));
                        insertStatement.bindDouble(15, Double.parseDouble(projMirChildArray.getJSONObject(i).getString("m")));
                        insertStatement.bindDouble(16, Double.parseDouble(projMirChildArray.getJSONObject(i).getString("n")));
                        insertStatement.bindDouble(17, Double.parseDouble(projMirChildArray.getJSONObject(i).getString("o")));
                        insertStatement.bindDouble(18, Double.parseDouble(projMirChildArray.getJSONObject(i).getString("p")));
                        insertStatement.bindString(19, projMirChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMirChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMirChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMirChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMirChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMirChildArray.getJSONObject(i).getString("v"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg62 != null) {
                            if (msg62.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg62.setText("Database inserting...");
                                msg62.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress62.setProgress(99);
                            else if (pbValue == 0)
                                progress62.setProgress(1);
                            else
                                progress62.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MR Child Details Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projMirChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMirChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMirChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn62 != null)
                        onListLoad(req, updateOn62, progress62, msg62, "projMirChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMirChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMirChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag62);
                insertStatement.bindString(2, flag62);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg62 != null) {
                    updateOn62.setText(updateDate);
                    progress62.setProgress(100);
                    msg62.setText("Update Success");
                    msg62.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projVechicleMovementForm extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag63, flag63, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag63);
            insertStatement.bindString(2, flag63);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projVechicleMovementForm");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projVechicleMovementFormArray = object.getJSONArray("values");
                if (projVechicleMovementFormArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projVechicleMovementFormDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projVechicleMovementFormArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projVechicleMovementFormArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projVechicleMovementFormArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projVechicleMovementFormArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projVechicleMovementFormArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projVechicleMovementFormArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projVechicleMovementFormArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projVechicleMovementFormArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projVechicleMovementFormArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projVechicleMovementFormArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projVechicleMovementFormArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projVechicleMovementFormArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projVechicleMovementFormArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projVechicleMovementFormArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projVechicleMovementFormArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projVechicleMovementFormArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projVechicleMovementFormArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projVechicleMovementFormArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projVechicleMovementFormArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projVechicleMovementFormArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projVechicleMovementFormArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projVechicleMovementFormArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projVechicleMovementFormArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projVechicleMovementFormArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projVechicleMovementFormArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projVechicleMovementFormArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projVechicleMovementFormArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projVechicleMovementFormArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projVechicleMovementFormArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projVechicleMovementFormArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projVechicleMovementFormArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projVechicleMovementFormArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projVechicleMovementFormArray.getJSONObject(i).getString("ae"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg63 != null) {
                            if (msg63.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg63.setText("Database inserting...");
                                msg63.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress63.setProgress(99);
                            else if (pbValue == 0)
                                progress63.setProgress(1);
                            else
                                progress63.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "VMF Details Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projVechicleMovementForm_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projVechicleMovementForm','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projVechicleMovementForm--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn63 != null)
                        onListLoad(req, updateOn63, progress63, msg63, "projVechicleMovementForm");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projVechicleMovementForm");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projVechicleMovementForm_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag63);
                insertStatement.bindString(2, flag63);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg63 != null) {
                    updateOn63.setText(updateDate);
                    progress63.setProgress(100);
                    msg63.setText("Update Success");
                    msg63.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projIndentMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag64, flag64, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag64);
            insertStatement.bindString(2, flag64);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag25, flag25, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("projIndentMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projIndentMasterArray = object.getJSONArray("values");
                if (projIndentMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projIndentMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projIndentMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projIndentMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projIndentMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projIndentMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projIndentMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projIndentMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projIndentMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projIndentMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projIndentMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projIndentMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projIndentMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projIndentMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projIndentMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projIndentMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projIndentMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projIndentMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projIndentMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projIndentMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projIndentMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projIndentMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projIndentMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projIndentMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projIndentMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projIndentMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projIndentMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projIndentMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg64 != null) {
                            if (msg64.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg64.setText("Database inserting...");
                                msg64.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress64.setProgress(99);
                            else if (pbValue == 0)
                                progress64.setProgress(1);
                            else
                                progress64.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Indent Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projIndentMaster_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projIndentMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projIndentMaster--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn64 != null)
                        onListLoad(req, updateOn64, progress64, msg64, "projIndentMaster");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projIndentMaster");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projIndentMaster_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag64);
                insertStatement.bindString(2, flag64);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg64 != null) {
                    updateOn64.setText(updateDate);
                    progress64.setProgress(100);
                    msg64.setText("Update Success");
                    msg64.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projIndentChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag65, flag65, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag65);
            insertStatement.bindString(2, flag65);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projIndentChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projIndentChildArray = object.getJSONArray("values");
                if (projIndentChildArray.length() > 0) {
                    String deleteId = projIndentChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projIndentChildArray.length(); i++) {
                        deleteId = deleteId + "," + projIndentChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjIndentChild> tableDeleteQuery = daoSession.queryBuilder(ProjIndentChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjIndentChildDao.Properties.Indent_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projIndentChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projIndentChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projIndentChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projIndentChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projIndentChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projIndentChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projIndentChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projIndentChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projIndentChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projIndentChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projIndentChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projIndentChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projIndentChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projIndentChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projIndentChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projIndentChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projIndentChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projIndentChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projIndentChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projIndentChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projIndentChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projIndentChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projIndentChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projIndentChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projIndentChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projIndentChildArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projIndentChildArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projIndentChildArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projIndentChildArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projIndentChildArray.getJSONObject(i).getString("aa"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg65 != null) {
                            if (msg65.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg65.setText("Database inserting...");
                                msg65.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress65.setProgress(99);
                            else if (pbValue == 0)
                                progress65.setProgress(1);
                            else
                                progress65.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Indent Child Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projIndentChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projIndentChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projIndentChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn65 != null)
                        onListLoad(req, updateOn65, progress65, msg65, "projIndentChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projIndentChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projIndentChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag65);
                insertStatement.bindString(2, flag65);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg65 != null) {
                    updateOn65.setText(updateDate);
                    progress65.setProgress(100);
                    msg65.setText("Update Success");
                    msg65.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projMinChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag66);
            insertStatement.bindString(2, flag66);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projMinChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projMinChildArray = object.getJSONArray("values");
                if (projMinChildArray.length() > 0) {
                    String deleteId = projMinChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMinChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMinChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMinChild> tableDeleteQuery = daoSession.queryBuilder(ProjMinChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMinChildDao.Properties.Min_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMinChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMinChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMinChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMinChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMinChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMinChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMinChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMinChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMinChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMinChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMinChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMinChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMinChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMinChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMinChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMinChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMinChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMinChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMinChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMinChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMinChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMinChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMinChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMinChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMinChildArray.getJSONObject(i).getString("v"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg66 != null) {
                            if (msg66.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg66.setText("Database inserting...");
                                msg66.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress66.setProgress(99);
                            else if (pbValue == 0)
                                progress66.setProgress(1);
                            else
                                progress66.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MIN Child Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projMinChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projMinChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projMinChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn66 != null)
                        onListLoad(req, updateOn66, progress66, msg66, "projMinChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projMinChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projMinChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag66);
                insertStatement.bindString(2, flag66);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg66 != null) {
                    updateOn66.setText(updateDate);
                    progress66.setProgress(100);
                    msg66.setText("Update Success");
                    msg66.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projGrnMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag67, flag67, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag67);
            insertStatement.bindString(2, flag67);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projGrnMaster");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projGrnMasterArray = object.getJSONArray("values");
                if (projGrnMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projGrnMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projGrnMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projGrnMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projGrnMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projGrnMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projGrnMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projGrnMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projGrnMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projGrnMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projGrnMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projGrnMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projGrnMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projGrnMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projGrnMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projGrnMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projGrnMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projGrnMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projGrnMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projGrnMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projGrnMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projGrnMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projGrnMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projGrnMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projGrnMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projGrnMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projGrnMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projGrnMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projGrnMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projGrnMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projGrnMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projGrnMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projGrnMasterArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projGrnMasterArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projGrnMasterArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projGrnMasterArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projGrnMasterArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projGrnMasterArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projGrnMasterArray.getJSONObject(i).getString("ai"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg67 != null) {
                            if (msg67.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg67.setText("Database inserting...");
                                msg67.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress67.setProgress(99);
                            else if (pbValue == 0)
                                progress67.setProgress(1);
                            else
                                progress67.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "GRN Master Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projGrnMaster_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projGrnMaster','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projGrnMaster--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn67 != null)
                        onListLoad(req, updateOn67, progress67, msg67, "projGrnMaster");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projGrnMaster");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projGrnMaster_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag67);
                insertStatement.bindString(2, flag67);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg67 != null) {
                    updateOn67.setText(updateDate);
                    progress67.setProgress(100);
                    msg67.setText("Update Success");
                    msg67.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projGrnItemChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag68);
            insertStatement.bindString(2, flag68);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONObject object = matObject.getJSONObject("projGrnItemChild");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray projGrnItemChildArray = object.getJSONArray("values");
                if (projGrnItemChildArray.length() > 0) {
                    String deleteId = projGrnItemChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projGrnItemChildArray.length(); i++) {
                        deleteId = deleteId + "," + projGrnItemChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjGrnItemChild> tableDeleteQuery = daoSession.queryBuilder(ProjGrnItemChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjGrnItemChildDao.Properties.Grn_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projGrnItemChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projGrnItemChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projGrnItemChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projGrnItemChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projGrnItemChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projGrnItemChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projGrnItemChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projGrnItemChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projGrnItemChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projGrnItemChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projGrnItemChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projGrnItemChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projGrnItemChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projGrnItemChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projGrnItemChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projGrnItemChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projGrnItemChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projGrnItemChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projGrnItemChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projGrnItemChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projGrnItemChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projGrnItemChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projGrnItemChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projGrnItemChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projGrnItemChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projGrnItemChildArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projGrnItemChildArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projGrnItemChildArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projGrnItemChildArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projGrnItemChildArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projGrnItemChildArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projGrnItemChildArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projGrnItemChildArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projGrnItemChildArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projGrnItemChildArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projGrnItemChildArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projGrnItemChildArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projGrnItemChildArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, projGrnItemChildArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, projGrnItemChildArray.getJSONObject(i).getString("ak"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg68 != null) {
                            if (msg68.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg68.setText("Database inserting...");
                                msg68.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress68.setProgress(99);
                            else if (pbValue == 0)
                                progress68.setProgress(1);
                            else
                                progress68.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "GRN Item Child Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(projGrnItemChild_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'projGrnItemChild','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "projGrnItemChild--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn68 != null)
                        onListLoad(req, updateOn68, progress68, msg68, "projGrnItemChild");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "projGrnItemChild");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(projGrnItemChild_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag68);
                insertStatement.bindString(2, flag68);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg68 != null) {
                    updateOn68.setText(updateDate);
                    progress68.setProgress(100);
                    msg68.setText("Update Success");
                    msg68.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class weightData extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag69, flag69, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag69);
            insertStatement.bindString(2, flag69);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag25, flag25, uid, updateDate, "Updating"));
                JSONObject object = matObject.getJSONObject("weightData");
                int totalRecord = Integer.parseInt(object.getString("recCount"));
                int page = Integer.parseInt(object.getString("page"));
                int totalPage = Integer.parseInt(object.getString("pageCount"));
                JSONArray weightDataArray = object.getJSONArray("values");
                if (weightDataArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + weightDataDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < weightDataArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, weightDataArray.getJSONObject(i).getString("a") + "_" + weightDataArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindString(3, weightDataArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(4, weightDataArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, weightDataArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, weightDataArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, weightDataArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, weightDataArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, weightDataArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, weightDataArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, weightDataArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, weightDataArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, weightDataArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, weightDataArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, weightDataArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, weightDataArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, weightDataArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, weightDataArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, weightDataArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, weightDataArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, weightDataArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, weightDataArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, weightDataArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, weightDataArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, weightDataArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, weightDataArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, weightDataArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, weightDataArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, weightDataArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, weightDataArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, weightDataArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, weightDataArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, weightDataArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, weightDataArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, weightDataArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, weightDataArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, weightDataArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, weightDataArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, weightDataArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, weightDataArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, weightDataArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(42, weightDataArray.getJSONObject(i).getString("an"));
                        insertStatement.bindString(43, weightDataArray.getJSONObject(i).getString("ao"));
                        insertStatement.bindString(44, weightDataArray.getJSONObject(i).getString("ap"));
                        insertStatement.bindString(45, weightDataArray.getJSONObject(i).getString("aq"));
                        insertStatement.bindString(46, weightDataArray.getJSONObject(i).getString("ar"));
                        insertStatement.bindString(47, weightDataArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(48, weightDataArray.getJSONObject(i).getString("at"));
                        insertStatement.bindString(49, weightDataArray.getJSONObject(i).getString("au"));
                        insertStatement.bindString(50, weightDataArray.getJSONObject(i).getString("av"));
                        insertStatement.bindString(51, weightDataArray.getJSONObject(i).getString("aw"));
                        insertStatement.bindString(52, weightDataArray.getJSONObject(i).getString("ax"));
                        insertStatement.bindString(53, weightDataArray.getJSONObject(i).getString("ay"));
                        insertStatement.bindString(54, weightDataArray.getJSONObject(i).getString("az"));
                        insertStatement.bindString(55, weightDataArray.getJSONObject(i).getString("ba"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                Float divValue = ((Float.parseFloat("" + (page)) / Float.parseFloat("" + totalPage)) * 100);
                pbValue = (int) (Math.round(divValue));
                progressHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (msg69 != null) {
                            if (msg69.getText().toString().equalsIgnoreCase("InProgress...")) {
                                msg69.setText("Database inserting...");
                                msg69.setTextColor(getResources().getColor(R.color.black));
                            }
                            if (pbValue == 100)
                                progress69.setProgress(99);
                            else if (pbValue == 0)
                                progress69.setProgress(1);
                            else
                                progress69.setProgress(pbValue);
                            Intent intent = new Intent();
                            Notification notification;
                            final PendingIntent pendingIntent = PendingIntent.getActivity(
                                    getApplicationContext(), 0, intent, 0);
                            notification = new Notification(R.drawable.eapicon,
                                    "Uploading file", System.currentTimeMillis());
                            notification.flags = notification.flags
                                    | Notification.FLAG_ONGOING_EVENT;
                            notification.contentView = new RemoteViews(getApplicationContext()
                                    .getPackageName(), R.layout.notification_syn);
                            notification.contentIntent = pendingIntent;
                            notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                    "Updating Database...");
                            notificationManager = (NotificationManager) getApplicationContext()
                                    .getSystemService(Context.NOTIFICATION_SERVICE);
                            notification.contentView.setTextViewText(R.id.loader_msg_text_view, "Weight Data Updating...");
                            notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                            notificationManager.notify(weightData_id, notification);
                        }
                    }
                });
                String isUpdateFinish = "false";
                if (!(object.getString("page").equalsIgnoreCase(object.getString("pageCount")))) {
                    String req = "{'Action':'MRALL_PROCESS','submode':'META_DATA','Cre_Id':'" + cr_id + "','UID':'" + uid + "','type':'force','lastUpdateDate':'','dataTable':'weightData','page':'" + (page + 1) + "'}";
                    Log.d(TAG, "weightData--> " + ApiCalls.getURLfromJson(req, context));
                    if (updateOn69 != null)
                        onListLoad(req, updateOn69, progress69, msg69, "weightData");
                    else
                        onListLoad(req, dummyTextView, dummyProgress, dummyTextView, "weightData");
                } else {
                    isUpdateFinish = "true";
                }
                updateDate = matObject.getString("currentDate");
                updateDate = updateDate + "&&" + isUpdateFinish;
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String[] val = updateDate.split("&&");
            updateDate = val[0];
            if (val[1].equalsIgnoreCase("true")) {
                if (notificationManager != null)
                    notificationManager.cancel(weightData_id);
                String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                        + " values (?,?,?,?,?);";
                DatabaseStatement insertStatement = db.compileStatement(insertSql);
                db.beginTransaction();
                insertStatement.clearBindings();
                insertStatement.bindString(1, flag69);
                insertStatement.bindString(2, flag69);
                insertStatement.bindString(3, uid);
                insertStatement.bindString(4, updateDate);
                insertStatement.bindString(5, "Updated");
                insertStatement.execute();
                insertStatement.close();
                db.setTransactionSuccessful();
                db.endTransaction();
                if (msg69 != null) {
                    updateOn69.setText(updateDate);
                    progress69.setProgress(100);
                    msg69.setText("Update Success");
                    msg69.setTextColor(getResources().getColor(R.color.dark_green));
                }
            }
        }
    }

    public class projGrnOtherChargeChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag70, flag70, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag70);
            insertStatement.bindString(2, flag70);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag70, flag70, uid, updateDate, "Updating"));
                JSONArray grnOtherChargeIdArray = matObject.getJSONArray("projGrnOtherChargeChild");
                if (grnOtherChargeIdArray.length() > 0) {
                    String deleteId = grnOtherChargeIdArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < grnOtherChargeIdArray.length(); i++) {
                        deleteId = deleteId + "," + grnOtherChargeIdArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjGrnOtherChargeChild> tableDeleteQuery = daoSession.queryBuilder(ProjGrnOtherChargeChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjGrnOtherChargeChildDao.Properties.Grn_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projGrnOtherChargeChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < grnOtherChargeIdArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, grnOtherChargeIdArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(grnOtherChargeIdArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(grnOtherChargeIdArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, grnOtherChargeIdArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, grnOtherChargeIdArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, grnOtherChargeIdArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, grnOtherChargeIdArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, grnOtherChargeIdArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, grnOtherChargeIdArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, grnOtherChargeIdArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, grnOtherChargeIdArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                       /* Log.d("grnOtherChargeId", "grnOtherChargeId Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg70 != null) {
                                    if (msg70.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg70.setText("Database inserting...");
                                        msg70.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress70.setProgress(99);
                                    else if (pbValue == 0)
                                        progress70.setProgress(1);
                                    else
                                        progress70.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "GRN Other Charges Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag70);
            insertStatement.bindString(2, flag70);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg70 != null) {
                updateOn70.setText(updateDate);
                progress70.setProgress(100);
                msg70.setText("Update Success");
                msg70.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projBmrfMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag71, flag71, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag71);
            insertStatement.bindString(2, flag71);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag71, flag71, uid, updateDate, "Updating"));
                JSONArray projBmrfMasterArray = matObject.getJSONArray("projBmrfMaster");
                if (projBmrfMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projBmrfMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projBmrfMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projBmrfMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projBmrfMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projBmrfMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projBmrfMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projBmrfMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projBmrfMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projBmrfMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projBmrfMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projBmrfMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projBmrfMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projBmrfMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projBmrfMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projBmrfMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projBmrfMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projBmrfMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projBmrfMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projBmrfMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projBmrfMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projBmrfMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projBmrfMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projBmrfMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projBmrfMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projBmrfMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projBmrfMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projBmrfMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projBmrfMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projBmrfMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projBmrfMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projBmrfMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projBmrfMasterArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projBmrfMasterArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projBmrfMasterArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projBmrfMasterArray.getJSONObject(i).getString("af"));
                        insertStatement.execute();
                       /* Log.d("projBmrfMaster", "projBmrfMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg71 != null) {
                                    if (msg71.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg71.setText("Database inserting...");
                                        msg71.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress71.setProgress(99);
                                    else if (pbValue == 0)
                                        progress71.setProgress(1);
                                    else
                                        progress71.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "BMRF Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag71);
            insertStatement.bindString(2, flag71);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg71 != null) {
                updateOn71.setText(updateDate);
                progress71.setProgress(100);
                msg71.setText("Update Success");
                msg71.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMatBmrfChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag72, flag72, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag72);
            insertStatement.bindString(2, flag72);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMatBmrfChildArray = matObject.getJSONArray("projMatBmrfChild");
                if (projMatBmrfChildArray.length() > 0) {
                    String deleteId = projMatBmrfChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMatBmrfChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMatBmrfChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMatBmrfChild> tableDeleteQuery = daoSession.queryBuilder(ProjMatBmrfChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMatBmrfChildDao.Properties.Bmrf_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMatBmrfChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMatBmrfChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMatBmrfChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMatBmrfChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMatBmrfChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projMatBmrfChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMatBmrfChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMatBmrfChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMatBmrfChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMatBmrfChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMatBmrfChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMatBmrfChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMatBmrfChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMatBmrfChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMatBmrfChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMatBmrfChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMatBmrfChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMatBmrfChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMatBmrfChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMatBmrfChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMatBmrfChildArray.getJSONObject(i).getString("r"));
                        insertStatement.execute();
                       /* Log.d("projMatBmrfChild", "projMatBmrfChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg72 != null) {
                                    if (msg72.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg72.setText("Database inserting...");
                                        msg72.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress72.setProgress(99);
                                    else if (pbValue == 0)
                                        progress72.setProgress(1);
                                    else
                                        progress72.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "BMRF Child Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag72);
            insertStatement.bindString(2, flag72);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg72 != null) {
                updateOn72.setText(updateDate);
                progress72.setProgress(100);
                msg72.setText("Update Success");
                msg72.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMrirMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag73, flag73, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag73);
            insertStatement.bindString(2, flag73);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag73, flag73, uid, updateDate, "Updating"));
                JSONArray projMrirMasterArray = matObject.getJSONArray("projMrirMaster");
                if (projMrirMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMrirMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrirMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrirMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMrirMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMrirMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMrirMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMrirMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMrirMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMrirMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMrirMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMrirMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMrirMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMrirMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMrirMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMrirMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMrirMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMrirMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMrirMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMrirMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMrirMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMrirMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMrirMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMrirMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMrirMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMrirMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMrirMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projMrirMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projMrirMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projMrirMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projMrirMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projMrirMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projMrirMasterArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projMrirMasterArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projMrirMasterArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projMrirMasterArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projMrirMasterArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projMrirMasterArray.getJSONObject(i).getString("ah"));
                        insertStatement.execute();
                       /* Log.d("projMrirMaster", "projMrirMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg73 != null) {
                                    if (msg73.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg73.setText("Database inserting...");
                                        msg73.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress73.setProgress(99);
                                    else if (pbValue == 0)
                                        progress73.setProgress(1);
                                    else
                                        progress73.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MRIR Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag73);
            insertStatement.bindString(2, flag73);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg73 != null) {
                updateOn73.setText(updateDate);
                progress73.setProgress(100);
                msg73.setText("Update Success");
                msg73.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMrirItemChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag74, flag74, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag74);
            insertStatement.bindString(2, flag74);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMrirItemChildArray = matObject.getJSONArray("projMrirItemChild");
                if (projMrirItemChildArray.length() > 0) {
                    String deleteId = projMrirItemChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMrirItemChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMrirItemChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMrirItemChild> tableDeleteQuery = daoSession.queryBuilder(ProjMrirItemChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMrirItemChildDao.Properties.Mrir_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMrirItemChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrirItemChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrirItemChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMrirItemChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMrirItemChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMrirItemChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindString(6, projMrirItemChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMrirItemChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMrirItemChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMrirItemChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMrirItemChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMrirItemChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMrirItemChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMrirItemChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMrirItemChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMrirItemChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMrirItemChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMrirItemChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMrirItemChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMrirItemChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMrirItemChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMrirItemChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMrirItemChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMrirItemChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMrirItemChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMrirItemChildArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projMrirItemChildArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projMrirItemChildArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projMrirItemChildArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projMrirItemChildArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projMrirItemChildArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projMrirItemChildArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projMrirItemChildArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projMrirItemChildArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projMrirItemChildArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projMrirItemChildArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projMrirItemChildArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projMrirItemChildArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, projMrirItemChildArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, projMrirItemChildArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, projMrirItemChildArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, projMrirItemChildArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(42, projMrirItemChildArray.getJSONObject(i).getString("an"));
                        insertStatement.bindString(43, projMrirItemChildArray.getJSONObject(i).getString("ao"));
                        insertStatement.bindString(44, projMrirItemChildArray.getJSONObject(i).getString("ap"));
                        insertStatement.bindString(45, projMrirItemChildArray.getJSONObject(i).getString("aq"));
                        insertStatement.bindString(46, projMrirItemChildArray.getJSONObject(i).getString("ar"));
                        insertStatement.bindString(47, projMrirItemChildArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(48, projMrirItemChildArray.getJSONObject(i).getString("at"));
                        insertStatement.bindString(49, projMrirItemChildArray.getJSONObject(i).getString("au"));
                        insertStatement.execute();
                       /* Log.d("projMrirItemChild", "projMrirItemChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg74 != null) {
                                    if (msg74.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg74.setText("Database inserting...");
                                        msg74.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress74.setProgress(99);
                                    else if (pbValue == 0)
                                        progress74.setProgress(1);
                                    else
                                        progress74.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MRIR Child Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag74);
            insertStatement.bindString(2, flag74);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg74 != null) {
                updateOn74.setText(updateDate);
                progress74.setProgress(100);
                msg74.setText("Update Success");
                msg74.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMrirOtherChargeChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag75, flag75, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag75);
            insertStatement.bindString(2, flag75);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag75, flag75, uid, updateDate, "Updating"));
                JSONArray projMrirOtherChargeChildArray = matObject.getJSONArray("projMrirOtherChargeChild");
                if (projMrirOtherChargeChildArray.length() > 0) {
                    String deleteId = projMrirOtherChargeChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMrirOtherChargeChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMrirOtherChargeChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMrirOtherChargeChild> tableDeleteQuery = daoSession.queryBuilder(ProjMrirOtherChargeChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMrirOtherChargeChildDao.Properties.Mrir_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMrirOtherChargeChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMrirOtherChargeChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMrirOtherChargeChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMrirOtherChargeChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMrirOtherChargeChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projMrirOtherChargeChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMrirOtherChargeChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMrirOtherChargeChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMrirOtherChargeChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMrirOtherChargeChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMrirOtherChargeChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMrirOtherChargeChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMrirOtherChargeChildArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                       /* Log.d("projMrirOtherChargeChild", "projMrirOtherChargeChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg75 != null) {
                                    if (msg75.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg75.setText("Database inserting...");
                                        msg75.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress75.setProgress(99);
                                    else if (pbValue == 0)
                                        progress75.setProgress(1);
                                    else
                                        progress75.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MRIR Other Charge Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag75);
            insertStatement.bindString(2, flag75);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg75 != null) {
                updateOn75.setText(updateDate);
                progress75.setProgress(100);
                msg75.setText("Update Success");
                msg75.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtdnMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag76, flag76, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag76);
            insertStatement.bindString(2, flag76);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag76, flag76, uid, updateDate, "Updating"));
                JSONArray projMtdnMasterArray = matObject.getJSONArray("projMtdnMaster");
                if (projMtdnMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMtdnMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtdnMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtdnMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtdnMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMtdnMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMtdnMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMtdnMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMtdnMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtdnMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtdnMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtdnMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtdnMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtdnMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtdnMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtdnMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtdnMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtdnMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtdnMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtdnMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtdnMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtdnMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtdnMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMtdnMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMtdnMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMtdnMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMtdnMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projMtdnMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projMtdnMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projMtdnMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projMtdnMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.execute();
                       /* Log.d("projMtdnMaster", "projMtdnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg76 != null) {
                                    if (msg76.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg76.setText("Database inserting...");
                                        msg76.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress76.setProgress(99);
                                    else if (pbValue == 0)
                                        progress76.setProgress(1);
                                    else
                                        progress76.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag76);
            insertStatement.bindString(2, flag76);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg76 != null) {
                updateOn76.setText(updateDate);
                progress76.setProgress(100);
                msg76.setText("Update Success");
                msg76.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtdnChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag77, flag77, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag77);
            insertStatement.bindString(2, flag77);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag77, flag77, uid, updateDate, "Updating"));
                JSONArray projMtdnChildArray = matObject.getJSONArray("projMtdnChild");
                if (projMtdnChildArray.length() > 0) {
                    String deleteId = projMtdnChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMtdnChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMtdnChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMtdnChild> tableDeleteQuery = daoSession.queryBuilder(ProjMtdnChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMtdnChildDao.Properties.Mtdn_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMtdnChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtdnChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtdnChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindLong(10, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("h")));
                        insertStatement.bindLong(11, Integer.parseInt(projMtdnChildArray.getJSONObject(i).getString("i")));
                        insertStatement.bindString(12, projMtdnChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtdnChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtdnChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtdnChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtdnChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtdnChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtdnChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtdnChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtdnChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtdnChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMtdnChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMtdnChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMtdnChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMtdnChildArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projMtdnChildArray.getJSONObject(i).getString("x"));
                        insertStatement.execute();
                       /* Log.d("projMtdnChild", "projMtdnChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg77 != null) {
                                    if (msg77.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg77.setText("Database inserting...");
                                        msg77.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress77.setProgress(99);
                                    else if (pbValue == 0)
                                        progress77.setProgress(1);
                                    else
                                        progress77.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTN Child Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag77);
            insertStatement.bindString(2, flag77);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg77 != null) {
                updateOn77.setText(updateDate);
                progress77.setProgress(100);
                msg77.setText("Update Success");
                msg77.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtdnOtherChargeChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag78, flag78, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag78);
            insertStatement.bindString(2, flag78);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag78, flag78, uid, updateDate, "Updating"));
                JSONArray projMtdnOtherChargeChildArray = matObject.getJSONArray("projMtdnOtherChargeChild");
                if (projMtdnOtherChargeChildArray.length() > 0) {
                    String deleteId = projMtdnOtherChargeChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMtdnOtherChargeChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMtdnOtherChargeChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMtdnOtherChargeChild> tableDeleteQuery = daoSession.queryBuilder(ProjMtdnOtherChargeChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMtdnOtherChargeChildDao.Properties.Mtdn_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMtdnOtherChargeChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtdnOtherChargeChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtdnOtherChargeChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtdnOtherChargeChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMtdnOtherChargeChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projMtdnOtherChargeChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMtdnOtherChargeChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMtdnOtherChargeChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtdnOtherChargeChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtdnOtherChargeChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtdnOtherChargeChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtdnOtherChargeChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtdnOtherChargeChildArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                       /* Log.d("projMtdnOtherChargeChild", "projMtdnOtherChargeChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg78 != null) {
                                    if (msg78.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg78.setText("Database inserting...");
                                        msg78.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress78.setProgress(99);
                                    else if (pbValue == 0)
                                        progress78.setProgress(1);
                                    else
                                        progress78.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTN Other Charge Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag78);
            insertStatement.bindString(2, flag78);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg78 != null) {
                updateOn78.setText(updateDate);
                progress78.setProgress(100);
                msg78.setText("Update Success");
                msg78.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtnMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag79, flag79, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag79);
            insertStatement.bindString(2, flag79);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag79, flag79, uid, updateDate, "Updating"));
                JSONArray projMtnMasterArray = matObject.getJSONArray("projMtnMaster");
                if (projMtnMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMtnMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtnMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtnMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtnMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMtnMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMtnMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMtnMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMtnMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtnMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtnMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtnMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtnMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtnMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtnMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtnMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtnMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtnMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtnMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtnMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtnMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtnMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtnMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMtnMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMtnMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMtnMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMtnMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg79 != null) {
                                    if (msg79.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg79.setText("Database inserting...");
                                        msg79.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress79.setProgress(99);
                                    else if (pbValue == 0)
                                        progress79.setProgress(1);
                                    else
                                        progress79.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag79);
            insertStatement.bindString(2, flag79);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg79 != null) {
                updateOn79.setText(updateDate);
                progress79.setProgress(100);
                msg79.setText("Update Success");
                msg79.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtnChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag80, flag80, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag80);
            insertStatement.bindString(2, flag80);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMtnChildArray = matObject.getJSONArray("projMtnChild");
                if (projMtnChildArray.length() > 0) {
                    String deleteId = projMtnChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMtnChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMtnChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMtnChild> tableDeleteQuery = daoSession.queryBuilder(ProjMtnChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMtnChildDao.Properties.Mtn_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMtnChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtnChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtnChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projMtnChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindString(10, projMtnChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtnChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtnChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtnChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtnChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtnChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtnChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtnChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtnChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtnChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtnChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtnChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMtnChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMtnChildArray.getJSONObject(i).getString("u"));
                        insertStatement.execute();
                       /* Log.d("projMtnChild", "projMtnChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg80 != null) {
                                    if (msg80.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg80.setText("Database inserting...");
                                        msg80.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress80.setProgress(99);
                                    else if (pbValue == 0)
                                        progress80.setProgress(1);
                                    else
                                        progress80.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Child Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag80);
            insertStatement.bindString(2, flag80);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg80 != null) {
                updateOn80.setText(updateDate);
                progress80.setProgress(100);
                msg80.setText("Update Success");
                msg80.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtrnMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag81, flag81, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag81);
            insertStatement.bindString(2, flag81);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag81, flag81, uid, updateDate, "Updating"));
                JSONArray projMtrnMasterArray = matObject.getJSONArray("projMtrnMaster");
                if (projMtrnMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMtrnMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtrnMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtrnMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtrnMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMtrnMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMtrnMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMtrnMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMtrnMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtrnMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtrnMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtrnMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtrnMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtrnMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtrnMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtrnMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtrnMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtrnMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtrnMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtrnMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtrnMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtrnMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtrnMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.execute();
                       /* Log.d("projMtrnMaster", "projMtrnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg81 != null) {
                                    if (msg81.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg81.setText("Database inserting...");
                                        msg81.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress81.setProgress(99);
                                    else if (pbValue == 0)
                                        progress81.setProgress(1);
                                    else
                                        progress81.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTARN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag81);
            insertStatement.bindString(2, flag81);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg81 != null) {
                updateOn81.setText(updateDate);
                progress81.setProgress(100);
                msg81.setText("Update Success");
                msg81.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtnCloseMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag82, flag82, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag82);
            insertStatement.bindString(2, flag82);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag82, flag82, uid, updateDate, "Updating"));
                JSONArray projMtnCloseMasterArray = matObject.getJSONArray("projMtnCloseMaster");
                if (projMtnCloseMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMtnCloseMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtnCloseMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtnCloseMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtnCloseMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMtnCloseMasterArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projMtnCloseMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMtnCloseMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMtnCloseMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtnCloseMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtnCloseMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtnCloseMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtnCloseMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtnCloseMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtnCloseMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtnCloseMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.execute();
                       /* Log.d("projMtnCloseMaster", "projMtnCloseMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg82 != null) {
                                    if (msg82.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg82.setText("Database inserting...");
                                        msg82.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress82.setProgress(99);
                                    else if (pbValue == 0)
                                        progress82.setProgress(1);
                                    else
                                        progress82.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Close Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag82);
            insertStatement.bindString(2, flag82);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg82 != null) {
                updateOn82.setText(updateDate);
                progress82.setProgress(100);
                msg82.setText("Update Success");
                msg82.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillRecommendationMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag83, flag83, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag83);
            insertStatement.bindString(2, flag83);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag83, flag83, uid, updateDate, "Updating"));
                JSONArray projPoBillRecommendationMasterArray = matObject.getJSONArray("projPoBillRecommendationMaster");
                if (projPoBillRecommendationMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projPoBillRecommendationMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillRecommendationMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillRecommendationMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillRecommendationMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projPoBillRecommendationMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projPoBillRecommendationMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoBillRecommendationMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoBillRecommendationMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillRecommendationMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoBillRecommendationMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillRecommendationMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillRecommendationMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillRecommendationMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoBillRecommendationMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoBillRecommendationMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoBillRecommendationMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoBillRecommendationMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoBillRecommendationMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projPoBillRecommendationMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projPoBillRecommendationMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projPoBillRecommendationMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projPoBillRecommendationMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projPoBillRecommendationMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                       /* Log.d("projPoBillRecommendationMaster", "projPoBillRecommendationMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg83 != null) {
                                    if (msg83.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg83.setText("Database inserting...");
                                        msg83.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress83.setProgress(99);
                                    else if (pbValue == 0)
                                        progress83.setProgress(1);
                                    else
                                        progress83.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Recomm Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag83);
            insertStatement.bindString(2, flag83);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg83 != null) {
                updateOn83.setText(updateDate);
                progress83.setProgress(100);
                msg83.setText("Update Success");
                msg83.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag84, flag84, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag84);
            insertStatement.bindString(2, flag84);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoBillMasterArray = matObject.getJSONArray("projPoBillMaster");
                if (projPoBillMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projPoBillMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projPoBillMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projPoBillMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoBillMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoBillMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoBillMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoBillMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoBillMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoBillMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoBillMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoBillMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projPoBillMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projPoBillMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projPoBillMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projPoBillMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projPoBillMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projPoBillMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projPoBillMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projPoBillMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projPoBillMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projPoBillMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projPoBillMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projPoBillMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projPoBillMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projPoBillMasterArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projPoBillMasterArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projPoBillMasterArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projPoBillMasterArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projPoBillMasterArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projPoBillMasterArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projPoBillMasterArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, projPoBillMasterArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, projPoBillMasterArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, projPoBillMasterArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, projPoBillMasterArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(42, projPoBillMasterArray.getJSONObject(i).getString("an"));
                        insertStatement.bindString(43, projPoBillMasterArray.getJSONObject(i).getString("ao"));
                        insertStatement.bindString(44, projPoBillMasterArray.getJSONObject(i).getString("ap"));
                        insertStatement.bindString(45, projPoBillMasterArray.getJSONObject(i).getString("aq"));
                        insertStatement.bindString(46, projPoBillMasterArray.getJSONObject(i).getString("ar"));
                        insertStatement.bindString(47, projPoBillMasterArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(48, projPoBillMasterArray.getJSONObject(i).getString("at"));
                        insertStatement.bindString(49, projPoBillMasterArray.getJSONObject(i).getString("au"));
                        insertStatement.bindString(50, projPoBillMasterArray.getJSONObject(i).getString("av"));
                        insertStatement.bindString(51, projPoBillMasterArray.getJSONObject(i).getString("aw"));
                        insertStatement.bindString(52, projPoBillMasterArray.getJSONObject(i).getString("ax"));
                        insertStatement.bindString(53, projPoBillMasterArray.getJSONObject(i).getString("ay"));
                        insertStatement.bindString(54, projPoBillMasterArray.getJSONObject(i).getString("az"));
                        insertStatement.bindString(55, projPoBillMasterArray.getJSONObject(i).getString("bb"));
                        insertStatement.bindString(56, projPoBillMasterArray.getJSONObject(i).getString("bc"));
                        insertStatement.execute();
                       /* Log.d("projPoBillMaster", "projPoBillMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg84 != null) {
                                    if (msg84.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg84.setText("Database inserting...");
                                        msg84.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress84.setProgress(99);
                                    else if (pbValue == 0)
                                        progress84.setProgress(1);
                                    else
                                        progress84.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag84);
            insertStatement.bindString(2, flag84);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg84 != null) {
                updateOn84.setText(updateDate);
                progress84.setProgress(100);
                msg84.setText("Update Success");
                msg84.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillRecommendationChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag85, flag85, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag85);
            insertStatement.bindString(2, flag85);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoBillRecommendationChildArray = matObject.getJSONArray("projPoBillRecommendationChild");
                if (projPoBillRecommendationChildArray.length() > 0) {
                    String deleteId = projPoBillRecommendationChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoBillRecommendationChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoBillRecommendationChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoBillRecommendationChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoBillRecommendationChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoBillRecommendationChildDao.Properties.Bill_rec_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoBillRecommendationChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillRecommendationChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillRecommendationChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillRecommendationChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillRecommendationChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projPoBillRecommendationChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindString(6, projPoBillRecommendationChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoBillRecommendationChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillRecommendationChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoBillRecommendationChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillRecommendationChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillRecommendationChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillRecommendationChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoBillRecommendationChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoBillRecommendationChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoBillRecommendationChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoBillRecommendationChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoBillRecommendationChildArray.getJSONObject(i).getString("o"));
                        insertStatement.execute();
                       /* Log.d("projPoBillRecommendationChild", "projPoBillRecommendationChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg85 != null) {
                                    if (msg85.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg85.setText("Database inserting...");
                                        msg85.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress85.setProgress(99);
                                    else if (pbValue == 0)
                                        progress85.setProgress(1);
                                    else
                                        progress85.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Recomm Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag85);
            insertStatement.bindString(2, flag85);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg85 != null) {
                updateOn85.setText(updateDate);
                progress85.setProgress(100);
                msg85.setText("Update Success");
                msg85.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillRecommendationPaymentChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag86, flag86, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag86);
            insertStatement.bindString(2, flag86);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoBillRecommendationPaymentChildArray = matObject.getJSONArray("projPoBillRecommendationPaymentChild");
                if (projPoBillRecommendationPaymentChildArray.length() > 0) {
                    String deleteId = projPoBillRecommendationPaymentChildArray.getJSONObject(0).getString("n");
                    for (int i = 0; i < projPoBillRecommendationPaymentChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("n");
                    }
                    final DeleteQuery<ProjPoBillRecommendationPaymentChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoBillRecommendationPaymentChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoBillRecommendationPaymentChildDao.Properties.Bill_rec_pay_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoBillRecommendationPaymentChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillRecommendationPaymentChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projPoBillRecommendationPaymentChildArray.getJSONObject(i).getString("p"));
                        insertStatement.execute();
                       /* Log.d("projPoBillRecommendationPaymentChild", "projPoBillRecommendationPaymentChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg86 != null) {
                                    if (msg86.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg86.setText("Database inserting...");
                                        msg86.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress86.setProgress(99);
                                    else if (pbValue == 0)
                                        progress86.setProgress(1);
                                    else
                                        progress86.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Recomm Payment Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag86);
            insertStatement.bindString(2, flag86);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg86 != null) {
                updateOn86.setText(updateDate);
                progress86.setProgress(100);
                msg86.setText("Update Success");
                msg86.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillRecommendationPaymentMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag87, flag87, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag87);
            insertStatement.bindString(2, flag87);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag87, flag87, uid, updateDate, "Updating"));
                JSONArray projPoBillRecommendationPaymentMasterArray = matObject.getJSONArray("projPoBillRecommendationPaymentMaster");
                if (projPoBillRecommendationPaymentMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projPoBillRecommendationPaymentMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillRecommendationPaymentMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projPoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.execute();
                       /* Log.d("projPoBillRecommendationPaymentMaster", "projPoBillRecommendationPaymentMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg87 != null) {
                                    if (msg87.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg87.setText("Database inserting...");
                                        msg87.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress87.setProgress(99);
                                    else if (pbValue == 0)
                                        progress87.setProgress(1);
                                    else
                                        progress87.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Recomm Payment Master Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag87);
            insertStatement.bindString(2, flag87);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg87 != null) {
                updateOn87.setText(updateDate);
                progress87.setProgress(100);
                msg87.setText("Update Success");
                msg87.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillRecommendationPoChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag88, flag88, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag88);
            insertStatement.bindString(2, flag88);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoBillRecommendationPoChildArray = matObject.getJSONArray("projPoBillRecommendationPoChild");
                if (projPoBillRecommendationPoChildArray.length() > 0) {
                    String deleteId = projPoBillRecommendationPoChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoBillRecommendationPoChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoBillRecommendationPoChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoBillRecommendationPoChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoBillRecommendationPoChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoBillRecommendationPoChildDao.Properties.Bill_rec_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoBillRecommendationPoChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillRecommendationPoChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillRecommendationPoChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillRecommendationPoChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillRecommendationPoChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projPoBillRecommendationPoChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projPoBillRecommendationPoChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindString(7, projPoBillRecommendationPoChildArray.getJSONObject(i).getString("e"));
                        insertStatement.execute();
                       /* Log.d("projPoBillRecommendationPoChild", "projPoBillRecommendationPoChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg88 != null) {
                                    if (msg88.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg88.setText("Database inserting...");
                                        msg88.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress88.setProgress(99);
                                    else if (pbValue == 0)
                                        progress88.setProgress(1);
                                    else
                                        progress88.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Recomm PO Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag88);
            insertStatement.bindString(2, flag88);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg88 != null) {
                updateOn88.setText(updateDate);
                progress88.setProgress(100);
                msg88.setText("Update Success");
                msg88.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillItemChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag89, flag89, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag89);
            insertStatement.bindString(2, flag89);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoBillItemChildArray = matObject.getJSONArray("projPoBillItemChild");
                if (projPoBillItemChildArray.length() > 0) {
                    String deleteId = projPoBillItemChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoBillItemChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoBillItemChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoBillItemChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoBillItemChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoBillItemChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoBillItemChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillItemChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillItemChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillItemChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillItemChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projPoBillItemChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projPoBillItemChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projPoBillItemChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projPoBillItemChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindString(9, projPoBillItemChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillItemChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillItemChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillItemChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projPoBillItemChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projPoBillItemChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projPoBillItemChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projPoBillItemChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projPoBillItemChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projPoBillItemChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projPoBillItemChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projPoBillItemChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projPoBillItemChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projPoBillItemChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projPoBillItemChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projPoBillItemChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projPoBillItemChildArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projPoBillItemChildArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projPoBillItemChildArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projPoBillItemChildArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projPoBillItemChildArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projPoBillItemChildArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, projPoBillItemChildArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, projPoBillItemChildArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, projPoBillItemChildArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, projPoBillItemChildArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, projPoBillItemChildArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, projPoBillItemChildArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, projPoBillItemChildArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, projPoBillItemChildArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, projPoBillItemChildArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, projPoBillItemChildArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, projPoBillItemChildArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(42, projPoBillItemChildArray.getJSONObject(i).getString("an"));
                        insertStatement.execute();
                       /* Log.d("projPoBillItemChild", "projPoBillItemChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg89 != null) {
                                    if (msg89.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg89.setText("Database inserting...");
                                        msg89.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress89.setProgress(99);
                                    else if (pbValue == 0)
                                        progress89.setProgress(1);
                                    else
                                        progress89.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Item Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag89);
            insertStatement.bindString(2, flag89);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg89 != null) {
                updateOn89.setText(updateDate);
                progress89.setProgress(100);
                msg89.setText("Update Success");
                msg89.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillRecommendationPaymentDetChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag90, flag90, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag90);
            insertStatement.bindString(2, flag90);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projPoBillRecommendationPaymentDetChildArray = matObject.getJSONArray("projPoBillRecommendationPaymentDetChild");
                if (projPoBillRecommendationPaymentDetChildArray.length() > 0) {
                    String deleteId = projPoBillRecommendationPaymentDetChildArray.getJSONObject(0).getString("c");
                    for (int i = 0; i < projPoBillRecommendationPaymentDetChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("c");
                    }
                    final DeleteQuery<ProjPoBillRecommendationPaymentDetChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoBillRecommendationPaymentDetChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoBillRecommendationPaymentDetChildDao.Properties.Bill_rec_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoBillRecommendationPaymentDetChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillRecommendationPaymentDetChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindString(7, projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillRecommendationPaymentDetChildArray.getJSONObject(i).getString("f"));
                        insertStatement.execute();
                       /* Log.d("projPoBillRecommendationPaymentDetChild", "projPoBillRecommendationPaymentDetChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg90 != null) {
                                    if (msg90.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg90.setText("Database inserting...");
                                        msg90.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress90.setProgress(99);
                                    else if (pbValue == 0)
                                        progress90.setProgress(1);
                                    else
                                        progress90.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Recomm Payment Det Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag90);
            insertStatement.bindString(2, flag90);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg90 != null) {
                updateOn90.setText(updateDate);
                progress90.setProgress(100);
                msg90.setText("Update Success");
                msg90.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoActBillOthersChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag91, flag91, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag91);
            insertStatement.bindString(2, flag91);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag91, flag91, uid, updateDate, "Updating"));
                JSONArray projPoActBillOthersChildArray = matObject.getJSONArray("projPoActBillOthersChild");
                if (projPoActBillOthersChildArray.length() > 0) {
                    String deleteId = projPoActBillOthersChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoActBillOthersChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoActBillOthersChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoActBillOthersChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoActBillOthersChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoActBillOthersChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoActBillOthersChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoActBillOthersChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoActBillOthersChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoActBillOthersChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoActBillOthersChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projPoActBillOthersChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoActBillOthersChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoActBillOthersChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoActBillOthersChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoActBillOthersChildArray.getJSONObject(i).getString("g"));
                        insertStatement.execute();
                       /* Log.d("projPoActBillOthersChild", "projPoActBillOthersChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg91 != null) {
                                    if (msg91.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg91.setText("Database inserting...");
                                        msg91.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress91.setProgress(99);
                                    else if (pbValue == 0)
                                        progress91.setProgress(1);
                                    else
                                        progress91.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Act Bill Other Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag91);
            insertStatement.bindString(2, flag91);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg91 != null) {
                updateOn91.setText(updateDate);
                progress91.setProgress(100);
                msg91.setText("Update Success");
                msg91.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projPoBillOtherChargeChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            // updateOnTableDao.insertOrReplace(new UpdateOnTable(flag92, flag92, uid, "", "Progress"));
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag92);
            insertStatement.bindString(2, flag92);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                //updateOnTableDao.insertOrReplace(new UpdateOnTable(flag92, flag92, uid, updateDate, "Updating"));
                JSONArray projPoBillOtherChargeChildArray = matObject.getJSONArray("projPoBillOtherChargeChild");
                if (projPoBillOtherChargeChildArray.length() > 0) {
                    String deleteId = projPoBillOtherChargeChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projPoBillOtherChargeChildArray.length(); i++) {
                        deleteId = deleteId + "," + projPoBillOtherChargeChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjPoBillOtherChargeChild> tableDeleteQuery = daoSession.queryBuilder(ProjPoBillOtherChargeChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjPoBillOtherChargeChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projPoBillOtherChargeChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projPoBillOtherChargeChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projPoBillOtherChargeChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projPoBillOtherChargeChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projPoBillOtherChargeChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projPoBillOtherChargeChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projPoBillOtherChargeChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projPoBillOtherChargeChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projPoBillOtherChargeChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projPoBillOtherChargeChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projPoBillOtherChargeChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projPoBillOtherChargeChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projPoBillOtherChargeChildArray.getJSONObject(i).getString("j"));
                        insertStatement.execute();
                       /* Log.d("projPoBillOtherChargeChild", "projPoBillOtherChargeChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg92 != null) {
                                    if (msg92.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg92.setText("Database inserting...");
                                        msg92.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress92.setProgress(99);
                                    else if (pbValue == 0)
                                        progress92.setProgress(1);
                                    else
                                        progress92.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Other Charge Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag92);
            insertStatement.bindString(2, flag92);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg92 != null) {
                updateOn92.setText(updateDate);
                progress92.setProgress(100);
                msg92.setText("Update Success");
                msg92.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtanMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag93);
            insertStatement.bindString(2, flag93);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMtanMasterArray = matObject.getJSONArray("projMtanMaster");
                if (projMtanMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMtanMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtanMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtanMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtanMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMtanMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMtanMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMtanMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMtanMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtanMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtanMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtanMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtanMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtanMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtanMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtanMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtanMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtanMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtanMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtanMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtanMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtanMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtanMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMtanMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMtanMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMtanMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMtanMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, projMtanMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, projMtanMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, projMtanMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, projMtanMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, projMtanMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg93 != null) {
                                    if (msg93.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg93.setText("Database inserting...");
                                        msg93.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress93.setProgress(99);
                                    else if (pbValue == 0)
                                        progress93.setProgress(1);
                                    else
                                        progress93.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag93);
            insertStatement.bindString(2, flag93);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg93 != null) {
                updateOn93.setText(updateDate);
                progress93.setProgress(100);
                msg93.setText("Update Success");
                msg93.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtanChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag94);
            insertStatement.bindString(2, flag94);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMtanChildArray = matObject.getJSONArray("projMtanChild");
                if (projMtanChildArray.length() > 0) {
                    String deleteId = projMtanChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMtanChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMtanChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMtanChild> tableDeleteQuery = daoSession.queryBuilder(ProjMtanChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMtanChildDao.Properties.Mtan_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMtanChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtanChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtanChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindLong(10, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("h")));
                        insertStatement.bindLong(11, Integer.parseInt(projMtanChildArray.getJSONObject(i).getString("i")));
                        insertStatement.bindString(12, projMtanChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtanChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtanChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMtanChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMtanChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMtanChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMtanChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMtanChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMtanChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMtanChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMtanChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projMtanChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projMtanChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projMtanChildArray.getJSONObject(i).getString("w"));
                        insertStatement.execute();
                       /* Log.d("projMtnChild", "projMtnChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg94 != null) {
                                    if (msg94.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg94.setText("Database inserting...");
                                        msg94.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress94.setProgress(99);
                                    else if (pbValue == 0)
                                        progress94.setProgress(1);
                                    else
                                        progress94.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Child Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag94);
            insertStatement.bindString(2, flag94);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg94 != null) {
                updateOn94.setText(updateDate);
                progress94.setProgress(100);
                msg94.setText("Update Success");
                msg94.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMtanOtherChargeChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag95);
            insertStatement.bindString(2, flag95);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMtanOtherChargeChildArray = matObject.getJSONArray("projMtanOtherChargeChild");
                if (projMtanOtherChargeChildArray.length() > 0) {
                    String deleteId = projMtanOtherChargeChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMtanOtherChargeChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMtanOtherChargeChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMtanOtherChargeChild> tableDeleteQuery = daoSession.queryBuilder(ProjMtanOtherChargeChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMtanOtherChargeChildDao.Properties.Mtan_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMtanOtherChargeChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMtanOtherChargeChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMtanOtherChargeChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMtanOtherChargeChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMtanOtherChargeChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMtanOtherChargeChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMtanOtherChargeChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindString(7, projMtanOtherChargeChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMtanOtherChargeChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMtanOtherChargeChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMtanOtherChargeChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMtanOtherChargeChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMtanOtherChargeChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMtanOtherChargeChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMtanOtherChargeChildArray.getJSONObject(i).getString("l"));
                        insertStatement.execute();
                       /* Log.d("projPoBillOtherChargeChild", "projPoBillOtherChargeChild Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg95 != null) {
                                    if (msg95.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg95.setText("Database inserting...");
                                        msg95.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress95.setProgress(99);
                                    else if (pbValue == 0)
                                        progress95.setProgress(1);
                                    else
                                        progress95.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "PO Bill Other Charge Child Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag95);
            insertStatement.bindString(2, flag95);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg95 != null) {
                updateOn95.setText(updateDate);
                progress95.setProgress(100);
                msg95.setText("Update Success");
                msg95.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillIowChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag96);
            insertStatement.bindString(2, flag96);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillIowChildArray = matObject.getJSONArray("projWoBillIowChild");
                if (projWoBillIowChildArray.length() > 0) {
                    String deleteId = projWoBillIowChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillIowChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillIowChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillIowChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillIowChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillIowChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillIowChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillIowChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillIowChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillIowChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projWoBillIowChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projWoBillIowChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projWoBillIowChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projWoBillIowChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillIowChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillIowChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillIowChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillIowChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillIowChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillIowChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillIowChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillIowChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillIowChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillIowChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillIowChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillIowChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillIowChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projWoBillIowChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projWoBillIowChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projWoBillIowChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projWoBillIowChildArray.getJSONObject(i).getString("v"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg96 != null) {
                                    if (msg96.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg96.setText("Database inserting...");
                                        msg96.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress96.setProgress(99);
                                    else if (pbValue == 0)
                                        progress96.setProgress(1);
                                    else
                                        progress96.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag96);
            insertStatement.bindString(2, flag96);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg96 != null) {
                updateOn96.setText(updateDate);
                progress96.setProgress(100);
                msg96.setText("Update Success");
                msg96.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillSubActivityChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag97);
            insertStatement.bindString(2, flag97);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillSubActivityChildArray = matObject.getJSONArray("projWoBillSubActivityChild");
                if (projWoBillSubActivityChildArray.length() > 0) {
                    String deleteId = projWoBillSubActivityChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillSubActivityChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillSubActivityChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillSubActivityChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillSubActivityChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillSubActivityChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillSubActivityChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillSubActivityChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillSubActivityChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projWoBillSubActivityChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindString(10, projWoBillSubActivityChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillSubActivityChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillSubActivityChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillSubActivityChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillSubActivityChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillSubActivityChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillSubActivityChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillSubActivityChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillSubActivityChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillSubActivityChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillSubActivityChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projWoBillSubActivityChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projWoBillSubActivityChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projWoBillSubActivityChildArray.getJSONObject(i).getString("u"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg97 != null) {
                                    if (msg97.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg97.setText("Database inserting...");
                                        msg97.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress97.setProgress(99);
                                    else if (pbValue == 0)
                                        progress97.setProgress(1);
                                    else
                                        progress97.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag97);
            insertStatement.bindString(2, flag97);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg97 != null) {
                updateOn97.setText(updateDate);
                progress97.setProgress(100);
                msg97.setText("Update Success");
                msg97.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillNmrChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag98);
            insertStatement.bindString(2, flag98);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillNmrChildArray = matObject.getJSONArray("projWoBillNmrChild");
                if (projWoBillNmrChildArray.length() > 0) {
                    String deleteId = projWoBillNmrChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillNmrChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillNmrChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillNmrChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillNmrChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillNmrChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillNmrChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillNmrChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillNmrChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillNmrChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projWoBillNmrChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projWoBillNmrChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projWoBillNmrChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projWoBillNmrChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillNmrChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillNmrChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillNmrChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillNmrChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillNmrChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillNmrChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillNmrChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillNmrChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillNmrChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillNmrChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillNmrChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillNmrChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillNmrChildArray.getJSONObject(i).getString("r"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg98 != null) {
                                    if (msg98.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg98.setText("Database inserting...");
                                        msg98.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress98.setProgress(99);
                                    else if (pbValue == 0)
                                        progress98.setProgress(1);
                                    else
                                        progress98.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag98);
            insertStatement.bindString(2, flag98);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg98 != null) {
                updateOn98.setText(updateDate);
                progress98.setProgress(100);
                msg98.setText("Update Success");
                msg98.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMbookQaMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag99);
            insertStatement.bindString(2, flag99);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMbookQaMasterArray = matObject.getJSONArray("projMbookQaMaster");
                if (projMbookQaMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projMbookQaMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookQaMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookQaMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMbookQaMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projMbookQaMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projMbookQaMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookQaMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projMbookQaMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projMbookQaMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookQaMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMbookQaMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMbookQaMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMbookQaMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMbookQaMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMbookQaMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMbookQaMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMbookQaMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMbookQaMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMbookQaMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projMbookQaMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMbookQaMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMbookQaMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projMbookQaMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg99 != null) {
                                    if (msg99.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg99.setText("Database inserting...");
                                        msg99.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress99.setProgress(99);
                                    else if (pbValue == 0)
                                        progress99.setProgress(1);
                                    else
                                        progress99.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag99);
            insertStatement.bindString(2, flag99);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg99 != null) {
                updateOn99.setText(updateDate);
                progress99.setProgress(100);
                msg99.setText("Update Success");
                msg99.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillIowDetChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag100);
            insertStatement.bindString(2, flag100);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillIowDetChildArray = matObject.getJSONArray("projWoBillIowDetChild");
                if (projWoBillIowDetChildArray.length() > 0) {
                    String deleteId = projWoBillIowDetChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillIowDetChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillIowDetChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillIowDetChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillIowDetChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillIowDetChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillIowDetChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillIowDetChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillIowDetChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillIowDetChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projWoBillIowDetChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projWoBillIowDetChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projWoBillIowDetChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindString(7, projWoBillIowDetChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillIowDetChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillIowDetChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillIowDetChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillIowDetChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillIowDetChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillIowDetChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillIowDetChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillIowDetChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillIowDetChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillIowDetChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillIowDetChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillIowDetChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillIowDetChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projWoBillIowDetChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projWoBillIowDetChildArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg100 != null) {
                                    if (msg100.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg100.setText("Database inserting...");
                                        msg100.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress100.setProgress(100);
                                    else if (pbValue == 0)
                                        progress100.setProgress(1);
                                    else
                                        progress100.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag100);
            insertStatement.bindString(2, flag100);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg100 != null) {
                updateOn100.setText(updateDate);
                progress100.setProgress(100);
                msg100.setText("Update Success");
                msg100.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillIowTaxChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag101);
            insertStatement.bindString(2, flag101);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillIowTaxChildArray = matObject.getJSONArray("projWoBillIowTaxChild");
                if (projWoBillIowTaxChildArray.length() > 0) {
                    String deleteId = projWoBillIowTaxChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillIowTaxChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillIowTaxChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillIowTaxChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillIowTaxChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillIowTaxChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillIowTaxChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillIowTaxChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillIowTaxChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillIowTaxChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projWoBillIowTaxChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projWoBillIowTaxChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projWoBillIowTaxChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projWoBillIowTaxChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindString(8, projWoBillIowTaxChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillIowTaxChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillIowTaxChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillIowTaxChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillIowTaxChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillIowTaxChildArray.getJSONObject(i).getString("k"));
                        insertStatement.execute();

                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag101);
            insertStatement.bindString(2, flag101);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg101 != null) {
                updateOn101.setText(updateDate);
                progress101.setProgress(100);
                msg101.setText("Update Success");
                msg101.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillSubActivityDetChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag102);
            insertStatement.bindString(2, flag102);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillSubActivityDetChildArray = matObject.getJSONArray("projWoBillSubActivityDetChild");
                if (projWoBillSubActivityDetChildArray.length() > 0) {
                    String deleteId = projWoBillSubActivityDetChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillSubActivityDetChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillSubActivityDetChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillSubActivityDetChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillSubActivityDetChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillSubActivityDetChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillSubActivityDetChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillSubActivityDetChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillSubActivityDetChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, projWoBillSubActivityDetChildArray.getJSONObject(i).getString("w"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg102 != null) {
                                    if (msg102.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg102.setText("Database inserting...");
                                        msg102.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress102.setProgress(102);
                                    else if (pbValue == 0)
                                        progress102.setProgress(1);
                                    else
                                        progress102.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag102);
            insertStatement.bindString(2, flag102);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg102 != null) {
                updateOn102.setText(updateDate);
                progress102.setProgress(100);
                msg102.setText("Update Success");
                msg102.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillNmrDetChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag103);
            insertStatement.bindString(2, flag103);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillNmrDetChildArray = matObject.getJSONArray("projWoBillNmrDetChild");
                if (projWoBillNmrDetChildArray.length() > 0) {
                    String deleteId = projWoBillNmrDetChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projWoBillNmrDetChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillNmrDetChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjWoBillNmrDetChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillNmrDetChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillNmrDetChildDao.Properties.Po_bill_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillNmrDetChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillNmrDetChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillNmrDetChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillNmrDetChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, projWoBillNmrDetChildArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, projWoBillNmrDetChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projWoBillNmrDetChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projWoBillNmrDetChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillNmrDetChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillNmrDetChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillNmrDetChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillNmrDetChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillNmrDetChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillNmrDetChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillNmrDetChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillNmrDetChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillNmrDetChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillNmrDetChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillNmrDetChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillNmrDetChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillNmrDetChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projWoBillNmrDetChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projWoBillNmrDetChildArray.getJSONObject(i).getString("t"));
                        insertStatement.execute();
                       /* Log.d("projMtnMaster", "projMtnMaster Inserted " + (i + 1));
                        Float divValue = ((Float.parseFloat("" + (i + 1)) / Float.parseFloat("" + weightDataArray.length())) * 100);
                        pbValue = (int) (Math.round(divValue));
                        progressHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                if (msg103 != null) {
                                    if (msg103.getText().toString().equalsIgnoreCase("InProgress...")) {
                                        msg103.setText("Database inserting...");
                                        msg103.setTextColor(getResources().getColor(R.color.black));
                                    }
                                    if (pbValue == 100)
                                        progress103.setProgress(103);
                                    else if (pbValue == 0)
                                        progress103.setProgress(1);
                                    else
                                        progress103.setProgress(pbValue);
                                    if (pbValue % 10 == 0 && pbValue != 100) {
                                        Intent intent = new Intent();
                                        Notification notification;
                                        final PendingIntent pendingIntent = PendingIntent.getActivity(
                                                getApplicationContext(), 0, intent, 0);
                                        notification = new Notification(R.drawable.eapicon,
                                                "Uploading file", System.currentTimeMillis());
                                        notification.flags = notification.flags
                                                | Notification.FLAG_ONGOING_EVENT;
                                        notification.contentView = new RemoteViews(getApplicationContext()
                                                .getPackageName(), R.layout.notification_syn);
                                        notification.contentIntent = pendingIntent;
                                        notification.contentView.setTextColor(R.id.loader_msg_text_view, getResources().getColor(R.color.black));
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view,
                                                "Updating Database...");
                                        notificationManager = (NotificationManager) getApplicationContext()
                                                .getSystemService(Context.NOTIFICATION_SERVICE);
                                        notification.contentView.setTextViewText(R.id.loader_msg_text_view, "MTRN Master Details Updating...");
                                        notification.contentView.setProgressBar(R.id.progressBar, 100, pbValue, false);
                                        notificationManager.notify(id, notification);
                                    }
                                }
                            }
                        });*/
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag103);
            insertStatement.bindString(2, flag103);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg103 != null) {
                updateOn103.setText(updateDate);
                progress103.setProgress(100);
                msg103.setText("Update Success");
                msg103.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class finAccountMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag104);
            insertStatement.bindString(2, flag104);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray finAccountMasterArray = matObject.getJSONArray("finAccountMaster");
                if (finAccountMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + finAccountMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < finAccountMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, finAccountMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(finAccountMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindString(4, finAccountMasterArray.getJSONObject(i).getString("b"));
                        insertStatement.bindString(5, finAccountMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, finAccountMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, finAccountMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, finAccountMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, finAccountMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, finAccountMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, finAccountMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, finAccountMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, finAccountMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, finAccountMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, finAccountMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, finAccountMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, finAccountMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, finAccountMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, finAccountMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, finAccountMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, finAccountMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, finAccountMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, finAccountMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.bindString(24, finAccountMasterArray.getJSONObject(i).getString("v"));
                        insertStatement.bindString(25, finAccountMasterArray.getJSONObject(i).getString("w"));
                        insertStatement.bindString(26, finAccountMasterArray.getJSONObject(i).getString("x"));
                        insertStatement.bindString(27, finAccountMasterArray.getJSONObject(i).getString("y"));
                        insertStatement.bindString(28, finAccountMasterArray.getJSONObject(i).getString("z"));
                        insertStatement.bindString(29, finAccountMasterArray.getJSONObject(i).getString("aa"));
                        insertStatement.bindString(30, finAccountMasterArray.getJSONObject(i).getString("ab"));
                        insertStatement.bindString(31, finAccountMasterArray.getJSONObject(i).getString("ac"));
                        insertStatement.bindString(32, finAccountMasterArray.getJSONObject(i).getString("ad"));
                        insertStatement.bindString(33, finAccountMasterArray.getJSONObject(i).getString("ae"));
                        insertStatement.bindString(34, finAccountMasterArray.getJSONObject(i).getString("af"));
                        insertStatement.bindString(35, finAccountMasterArray.getJSONObject(i).getString("ag"));
                        insertStatement.bindString(36, finAccountMasterArray.getJSONObject(i).getString("ah"));
                        insertStatement.bindString(37, finAccountMasterArray.getJSONObject(i).getString("ai"));
                        insertStatement.bindString(38, finAccountMasterArray.getJSONObject(i).getString("aj"));
                        insertStatement.bindString(39, finAccountMasterArray.getJSONObject(i).getString("ak"));
                        insertStatement.bindString(40, finAccountMasterArray.getJSONObject(i).getString("al"));
                        insertStatement.bindString(41, finAccountMasterArray.getJSONObject(i).getString("am"));
                        insertStatement.bindString(42, finAccountMasterArray.getJSONObject(i).getString("an"));
                        insertStatement.bindString(43, finAccountMasterArray.getJSONObject(i).getString("ao"));
                        insertStatement.bindString(44, finAccountMasterArray.getJSONObject(i).getString("ap"));
                        insertStatement.bindString(45, finAccountMasterArray.getJSONObject(i).getString("aq"));
                        insertStatement.bindString(46, finAccountMasterArray.getJSONObject(i).getString("ar"));
                        insertStatement.bindString(47, finAccountMasterArray.getJSONObject(i).getString("as"));
                        insertStatement.bindString(48, finAccountMasterArray.getJSONObject(i).getString("at"));
                        insertStatement.bindString(49, finAccountMasterArray.getJSONObject(i).getString("au"));
                        insertStatement.bindString(50, finAccountMasterArray.getJSONObject(i).getString("av"));
                        insertStatement.bindString(51, finAccountMasterArray.getJSONObject(i).getString("aw"));
                        insertStatement.bindString(52, finAccountMasterArray.getJSONObject(i).getString("ax"));
                        insertStatement.bindString(53, finAccountMasterArray.getJSONObject(i).getString("ay"));
                        insertStatement.bindString(54, finAccountMasterArray.getJSONObject(i).getString("az"));
                        insertStatement.bindString(55, finAccountMasterArray.getJSONObject(i).getString("ba"));
                        insertStatement.bindString(56, finAccountMasterArray.getJSONObject(i).getString("bb"));
                        insertStatement.bindString(57, finAccountMasterArray.getJSONObject(i).getString("bc"));
                        insertStatement.bindString(58, finAccountMasterArray.getJSONObject(i).getString("bd"));
                        insertStatement.bindString(59, finAccountMasterArray.getJSONObject(i).getString("be"));
                        insertStatement.bindString(60, finAccountMasterArray.getJSONObject(i).getString("bf"));
                        insertStatement.bindString(61, finAccountMasterArray.getJSONObject(i).getString("bg"));
                        insertStatement.bindString(62, finAccountMasterArray.getJSONObject(i).getString("bh"));
                        insertStatement.execute();

                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag104);
            insertStatement.bindString(2, flag104);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg104 != null) {
                updateOn104.setText(updateDate);
                progress104.setProgress(100);
                msg104.setText("Update Success");
                msg104.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillRecommendationPaymentMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag105);
            insertStatement.bindString(2, flag105);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillRecommendationPaymentMasterArray = matObject.getJSONArray("projWoBillRecommendationPaymentMaster");
                if (projWoBillRecommendationPaymentMasterArray.length() > 0) {
                    String insertSql = "Insert or Replace into " + projWoBillRecommendationPaymentMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillRecommendationPaymentMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("d"));
                        insertStatement.bindString(7, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("s"));
                        insertStatement.bindString(22, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("t"));
                        insertStatement.bindString(23, projWoBillRecommendationPaymentMasterArray.getJSONObject(i).getString("u"));
                        insertStatement.execute();
                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag105);
            insertStatement.bindString(2, flag105);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg105 != null) {
                updateOn105.setText(updateDate);
                progress105.setProgress(100);
                msg105.setText("Update Success");
                msg105.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projWoBillRecommendationPaymentChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag106);
            insertStatement.bindString(2, flag106);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projWoBillRecommendationPaymentChildArray = matObject.getJSONArray("projWoBillRecommendationPaymentChild");
                if (projWoBillRecommendationPaymentChildArray.length() > 0) {
                    String deleteId = projWoBillRecommendationPaymentChildArray.getJSONObject(0).getString("c");
                    for (int i = 0; i < projWoBillRecommendationPaymentChildArray.length(); i++) {
                        deleteId = deleteId + "," + projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("c");
                    }
                    final DeleteQuery<ProjWoBillRecommendationPaymentChild> tableDeleteQuery = daoSession.queryBuilder(ProjWoBillRecommendationPaymentChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjWoBillRecommendationPaymentChildDao.Properties.Bill_rec_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projWoBillRecommendationPaymentChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projWoBillRecommendationPaymentChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindString(7, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("e"));
                        insertStatement.bindString(8, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("p"));
                        insertStatement.bindString(19, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projWoBillRecommendationPaymentChildArray.getJSONObject(i).getString("r"));
                                                insertStatement.execute();

                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag106);
            insertStatement.bindString(2, flag106);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg106 != null) {
                updateOn106.setText(updateDate);
                progress106.setProgress(100);
                msg106.setText("Update Success");
                msg106.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }
    public class projMirnMaster extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag107);
            insertStatement.bindString(2, flag107);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMirnMasterArray = matObject.getJSONArray("projMirnMaster");
                if (projMirnMasterArray.length() > 0) {

                    String insertSql = "Insert or Replace into " + projMirnMasterDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMirnMasterArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMirnMasterArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMirnMasterArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMirnMasterArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMirnMasterArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMirnMasterArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projMirnMasterArray.getJSONObject(i).getString("e")));
                        insertStatement.bindString(8, projMirnMasterArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMirnMasterArray.getJSONObject(i).getString("g"));
                        insertStatement.bindString(10, projMirnMasterArray.getJSONObject(i).getString("h"));
                        insertStatement.bindString(11, projMirnMasterArray.getJSONObject(i).getString("i"));
                        insertStatement.bindString(12, projMirnMasterArray.getJSONObject(i).getString("j"));
                        insertStatement.bindString(13, projMirnMasterArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMirnMasterArray.getJSONObject(i).getString("l"));
                        insertStatement.bindString(15, projMirnMasterArray.getJSONObject(i).getString("m"));
                        insertStatement.bindString(16, projMirnMasterArray.getJSONObject(i).getString("n"));
                        insertStatement.bindString(17, projMirnMasterArray.getJSONObject(i).getString("o"));
                        insertStatement.bindString(18, projMirnMasterArray.getJSONObject(i).getString("p"));
                        insertStatement.bindLong(19, Integer.parseInt(projMirnMasterArray.getJSONObject(i).getString("q")));
                        insertStatement.bindString(20, projMirnMasterArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMirnMasterArray.getJSONObject(i).getString("s"));

                        insertStatement.execute();

                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag107);
            insertStatement.bindString(2, flag107);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg107 != null) {
                updateOn107.setText(updateDate);
                progress107.setProgress(100);
                msg107.setText("Update Success");
                msg107.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }
    public class projMirnChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag108);
            insertStatement.bindString(2, flag108);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMirnChildArray = matObject.getJSONArray("projMirnChild");
                if (projMirnChildArray.length() > 0) {
                    String deleteId = projMirnChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMirnChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMirnChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMirnChild> tableDeleteQuery = daoSession.queryBuilder(ProjMirnChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMirnChildDao.Properties.Mirn_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMirnChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMirnChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMirnChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindLong(5, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("c")));
                        insertStatement.bindLong(6, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("d")));
                        insertStatement.bindLong(7, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindLong(8, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("f")));
                        insertStatement.bindLong(9, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("g")));
                        insertStatement.bindLong(10, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("h")));
                        insertStatement.bindLong(11, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("i")));
                        insertStatement.bindLong(12, Integer.parseInt(projMirnChildArray.getJSONObject(i).getString("j")));
                        insertStatement.bindString(13, projMirnChildArray.getJSONObject(i).getString("k"));
                        insertStatement.bindString(14, projMirnChildArray.getJSONObject(i).getString("l"));
                        insertStatement.bindDouble(15, Double.parseDouble(projMirnChildArray.getJSONObject(i).getString("m")));
                        insertStatement.bindDouble(16, Double.parseDouble(projMirnChildArray.getJSONObject(i).getString("n")));
                        insertStatement.bindDouble(17, Double.parseDouble(projMirnChildArray.getJSONObject(i).getString("o")));
                        insertStatement.bindDouble(18, Double.parseDouble(projMirnChildArray.getJSONObject(i).getString("p")));
                        insertStatement.bindString(19, projMirnChildArray.getJSONObject(i).getString("q"));
                        insertStatement.bindString(20, projMirnChildArray.getJSONObject(i).getString("r"));
                        insertStatement.bindString(21, projMirnChildArray.getJSONObject(i).getString("s"));
                        insertStatement.bindDouble(22, Double.parseDouble(projMirnChildArray.getJSONObject(i).getString("t")));
                        insertStatement.bindDouble(23, Double.parseDouble(projMirnChildArray.getJSONObject(i).getString("u")));
                        insertStatement.execute();

                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag108);
            insertStatement.bindString(2, flag108);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg108 != null) {
                updateOn108.setText(updateDate);
                progress108.setProgress(100);
                msg108.setText("Update Success");
                msg108.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class projMbookLabourChild extends AsyncTask<JSONObject, String, String> {
        @Override
        protected void onPreExecute() {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag109);
            insertStatement.bindString(2, flag109);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, "");
            insertStatement.bindString(5, "Updating");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
        }

        @Override
        protected String doInBackground(JSONObject... params) {
            Log.d("yourTag", "long running service task");
            // while (true) {
            String updateDate = "";
            try {
                JSONObject matObject = params[0];
                JSONArray projMbookLabourChildArray = matObject.getJSONArray("projMbookLabourChild");
                if (projMbookLabourChildArray.length() > 0) {
                    String deleteId = projMbookLabourChildArray.getJSONObject(0).getString("b");
                    for (int i = 0; i < projMbookLabourChildArray.length(); i++) {
                        deleteId = deleteId + "," + projMbookLabourChildArray.getJSONObject(i).getString("b");
                    }
                    final DeleteQuery<ProjMbookLabourChild> tableDeleteQuery = daoSession.queryBuilder(ProjMbookLabourChild.class)
                            .where(new WhereCondition.PropertyCondition(ProjMbookLabourChildDao.Properties.Mbook_id, "IN(" + deleteId + ")"))
                            .buildDelete();
                    tableDeleteQuery.executeDeleteWithoutDetachingEntities();
                    daoSession.clear();
                    String insertSql = "Insert or Replace into " + projMbookLabourChildDao.getTablename()
                            + " values (?,?,?,?,?,?,?,?,?);";
                    DatabaseStatement insertStatement = db.compileStatement(insertSql);
                    db.beginTransaction();
                    for (int i = 0; i < projMbookLabourChildArray.length(); i++) {
                        insertStatement.clearBindings();
                        insertStatement.bindString(1, projMbookLabourChildArray.getJSONObject(i).getString("a"));
                        insertStatement.bindString(2, uid);
                        insertStatement.bindLong(3, Integer.parseInt(projMbookLabourChildArray.getJSONObject(i).getString("a")));
                        insertStatement.bindLong(4, Integer.parseInt(projMbookLabourChildArray.getJSONObject(i).getString("b")));
                        insertStatement.bindString(5, projMbookLabourChildArray.getJSONObject(i).getString("c"));
                        insertStatement.bindString(6, projMbookLabourChildArray.getJSONObject(i).getString("d"));
                        insertStatement.bindLong(7, Integer.parseInt(projMbookLabourChildArray.getJSONObject(i).getString("e")));
                        insertStatement.bindString(8, projMbookLabourChildArray.getJSONObject(i).getString("f"));
                        insertStatement.bindString(9, projMbookLabourChildArray.getJSONObject(i).getString("g"));

                        insertStatement.execute();

                    }
                    insertStatement.close();
                    db.setTransactionSuccessful();
                    db.endTransaction();
                }
                updateDate = matObject.getString("currentDate");
                if (notificationManager != null)
                    notificationManager.cancel(id);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return updateDate;
        }

        @Override
        protected void onPostExecute(String updateDate) {
            String insertSql = "Insert or Replace into " + updateOnTableDao.getTablename()
                    + " values (?,?,?,?,?);";
            DatabaseStatement insertStatement = db.compileStatement(insertSql);
            db.beginTransaction();
            insertStatement.clearBindings();
            insertStatement.bindString(1, flag109);
            insertStatement.bindString(2, flag109);
            insertStatement.bindString(3, uid);
            insertStatement.bindString(4, updateDate);
            insertStatement.bindString(5, "Updated");
            insertStatement.execute();
            insertStatement.close();
            db.setTransactionSuccessful();
            db.endTransaction();
            if (msg109 != null) {
                updateOn109.setText(updateDate);
                progress109.setProgress(100);
                msg109.setText("Update Success");
                msg109.setTextColor(getResources().getColor(R.color.dark_green));
            }
        }
    }

    public class NotifyServiceReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context arg0, Intent arg1) {
            context.unregisterReceiver(this);
            Log.d("NotifyServiceReceiver", "Loading");
        }
    }
}